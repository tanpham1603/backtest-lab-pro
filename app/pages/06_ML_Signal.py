import streamlit as st
import pandas as pd
import joblib
import sys
import os
import pandas_ta as ta # Import th∆∞ vi·ªán m·ªõi

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import c√°c module t·ª´ th∆∞ m·ª•c app
try:
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if project_root not in sys.path:
        sys.path.append(project_root)
    from loaders.crypto_loader import CryptoLoader
except ImportError:
    st.error("L·ªói import: Kh√¥ng t√¨m th·∫•y CryptoLoader. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c th∆∞ m·ª•c.")
    st.stop()

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="ML Signal", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ T√≠n hi·ªáu Giao d·ªãch t·ª´ Machine Learning")
st.markdown("### Xem d·ª± ƒëo√°n MUA/B√ÅN cho ng√†y ti·∫øp theo d·ª±a tr√™n m√¥ h√¨nh Random Forest.")

# --- H√†m t·∫£i model v√† d·ªØ li·ªáu, t√≠nh to√°n t√≠n hi·ªáu ---
@st.cache_data(ttl=300) # Cache k·∫øt qu·∫£ trong 5 ph√∫t
def get_signal_and_data(symbol, timeframe, limit):
    """
    T·∫£i model, d·ªØ li·ªáu, t√≠nh to√°n ch·ªâ b√°o v√† tr·∫£ v·ªÅ t√≠n hi·ªáu c√πng v·ªõi d·ªØ li·ªáu.
    """
    try:
        # 1. T·∫£i m√¥ h√¨nh
        model_path = os.path.join("app", "ml_signals", "rf_signal.pkl")
        if not os.path.exists(model_path):
            st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file model t·∫°i '{model_path}'. Vui l√≤ng ch·∫°y 'train_model.py' tr∆∞·ªõc.")
            return None, None
            
        model = joblib.load(model_path)

        # 2. T·∫£i d·ªØ li·ªáu
        df = CryptoLoader().fetch(symbol, timeframe, limit)
        if df.empty:
            st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ {symbol}.")
            return None, None

        # 3. T√≠nh to√°n c√°c ƒë·∫∑c tr∆∞ng (features) b·∫±ng pandas-ta
        df.ta.rsi(length=14, append=True)
        df.ta.sma(length=20, append=True)
        df.rename(columns={'RSI_14': 'RSI', 'SMA_20': 'MA20'}, inplace=True)
        df.dropna(inplace=True)

        if df.empty:
            st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n ch·ªâ b√°o.")
            return None, None

        # 4. ƒê∆∞a ra d·ª± ƒëo√°n
        predictions = model.predict(df[["RSI", "MA20"]])
        df['Prediction'] = ["BUY" if p == 1 else "SELL" for p in predictions]
        signal = df['Prediction'].iloc[-1]
        
        return signal, df.tail(30)

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y t√≠n hi·ªáu ML: {e}")
        return None, None

# --- Giao di·ªán Streamlit ---
st.sidebar.header("C·∫•u h√¨nh T√≠n hi·ªáu")
symbol_input = st.sidebar.text_input("Nh·∫≠p m√£ giao d·ªãch:", "BTC/USDT").upper()
tf_input = st.sidebar.selectbox("Khung th·ªùi gian:", ["15m", "1h", "4h", "1d"], index=1)

if st.sidebar.button("L·∫•y t√≠n hi·ªáu"):
    with st.spinner(f"ƒêang ph√¢n t√≠ch v√† d·ª± ƒëo√°n cho {symbol_input}..."):
        current_signal, latest_data = get_signal_and_data(symbol_input, tf_input, 200)
        
        if current_signal:
            st.subheader(f"D·ª± ƒëo√°n cho {symbol_input}")
            
            if current_signal == "BUY":
                st.success(f"üü¢ **T√çN HI·ªÜU HI·ªÜN T·∫†I: MUA (BUY)**")
            else:
                st.error(f"üî¥ **T√çN HI·ªÜU HI·ªÜN T·∫†I: B√ÅN (SELL)**")
            
            st.markdown("---")
            st.subheader("D·ªØ li·ªáu v√† D·ª± ƒëo√°n g·∫ßn nh·∫•t")
            
            def highlight_signal(s):
                return ['background-color: #2E8B57' if v == "BUY" else 'background-color: #B22222' for v in s]

            st.dataframe(latest_data[['Close', 'RSI', 'MA20', 'Prediction']].style.apply(highlight_signal, subset=['Prediction']))
        else:
            st.warning("Kh√¥ng th·ªÉ t·∫°o t√≠n hi·ªáu.")
else:
    st.info("üëà Vui l√≤ng c·∫•u h√¨nh v√† nh·∫•n 'L·∫•y t√≠n hi·ªáu' ·ªü thanh b√™n tr√°i.")
