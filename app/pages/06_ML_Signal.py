import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import ccxt
import yfinance as yf
import pandas_ta as ta

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="ML Signal", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ T√≠n hi·ªáu Giao d·ªãch t·ª´ Machine Learning")
st.markdown("### D·ª± ƒëo√°n MUA/B√ÅN cho ng√†y ti·∫øp theo d·ª±a tr√™n m√¥ h√¨nh Random Forest")

# --- Sidebar ƒë·ªÉ ng∆∞·ªùi d√πng t√πy ch·ªânh ---
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh T√≠n hi·ªáu")

asset_class = st.sidebar.radio("Lo·∫°i t√†i s·∫£n:", ["Crypto", "Forex", "Stocks"], key="ml_asset")

if asset_class == "Crypto":
    symbol = st.sidebar.text_input("Nh·∫≠p m√£ giao d·ªãch:", "BTC/USDT", key="ml_crypto_symbol")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1h", "4h", "1d"], index=2, key="ml_crypto_tf")
else: # Forex v√† Stocks
    symbol = st.sidebar.text_input("Nh·∫≠p m√£ giao d·ªãch:", "EURUSD=X" if asset_class == "Forex" else "AAPL", key="ml_stock_symbol")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1d"], index=0, key="ml_stock_tf")


# --- H√†m t·∫£i d·ªØ li·ªáu an to√†n ---
@st.cache_data(ttl=600)
def load_data_for_signal(asset, sym, timeframe):
    """T·∫£i d·ªØ li·ªáu ƒë·ªÉ t·∫°o t√≠n hi·ªáu m·ªôt c√°ch an to√†n."""
    try:
        if asset == "Crypto":
            exchange = ccxt.kucoin() # D√πng KuCoin ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
            ohlcv = exchange.fetch_ohlcv(sym, timeframe, limit=100)
            data = pd.DataFrame(ohlcv, columns=['timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
            data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
            data.set_index('timestamp', inplace=True)
        else: # Forex v√† Stocks
            data = yf.download(sym, period="1y", interval=timeframe, progress=False)
            # Chu·∫©n h√≥a t√™n c·ªôt ƒë·ªÉ x·ª≠ l√Ω c·∫£ tuple
            data.columns = [col[0].capitalize() if isinstance(col, tuple) else str(col).capitalize() for col in data.columns]

        if data is None or data.empty:
            st.error(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu cho m√£ {sym}.")
            return None
        
        return data

    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu cho {sym}: {e}")
        return None

# --- H√†m t·∫°o t√≠n hi·ªáu ML (C·∫£i ti·∫øn x·ª≠ l√Ω l·ªói) ---
def get_ml_signal(data):
    """T·∫°o t√≠n hi·ªáu t·ª´ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i."""
    try:
        # 1. T·∫£i m√¥ h√¨nh
        model_path = "app/ml_signals/rf_signal.pkl"
        if not os.path.exists(model_path):
            st.warning(f"Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh t·∫°i: {model_path}.")
            return "ERROR", "Kh√¥ng t√¨m th·∫•y t·ªáp m√¥ h√¨nh"
            
        try:
            model = joblib.load(model_path)
        # --- B·∫ÆT L·ªñI T∆Ø∆†NG TH√çCH ---
        except (ModuleNotFoundError, AttributeError) as e:
            st.error(f"L·ªói T∆∞∆°ng Th√≠ch Th∆∞ Vi·ªán: Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh `{model_path}`.")
            st.warning(f"L·ªói n√†y x·∫£y ra v√¨ phi√™n b·∫£n c·ªßa `scikit-learn` ho·∫∑c `numpy` tr√™n server kh√¥ng kh·ªõp v·ªõi phi√™n b·∫£n b·∫°n ƒë√£ d√πng ƒë·ªÉ t·∫°o m√¥ h√¨nh. H√£y ƒë·∫£m b·∫£o t·ªáp `requirements.txt` ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch√≠nh x√°c v√† ·ª©ng d·ª•ng ƒë√£ ƒë∆∞·ª£c Reboot. Chi ti·∫øt l·ªói: {e}")
            return "ERROR", "L·ªói t∆∞∆°ng th√≠ch th∆∞ vi·ªán"

        # 2. T√≠nh to√°n c√°c ƒë·∫∑c tr∆∞ng (features)
        if 'Close' not in data.columns:
            return "ERROR", "D·ªØ li·ªáu thi·∫øu c·ªôt 'Close'"

        # S·ª≠ d·ª•ng pandas-ta ƒë·ªÉ t√≠nh to√°n ch·ªâ b√°o
        data.ta.rsi(length=14, append=True)
        data.ta.sma(length=20, append=True)
        
        # ƒê·ªïi t√™n c·ªôt cho nh·∫•t qu√°n v·ªõi m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
        data.rename(columns={"RSI_14": "RSI", "SMA_20": "MA20"}, inplace=True)
        data.dropna(inplace=True)

        if data.empty:
            return "HOLD", "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n ch·ªâ b√°o"

        # 3. L·∫•y d√≤ng d·ªØ li·ªáu cu·ªëi c√πng ƒë·ªÉ d·ª± ƒëo√°n
        latest_features = data[["RSI", "MA20"]].iloc[-1:]
        
        # 4. ƒê∆∞a ra d·ª± ƒëo√°n
        prediction = model.predict(latest_features)[0]
        
        if prediction == 1:
            return "BUY", "T√≠n hi·ªáu MUA ƒë∆∞·ª£c ph√°t hi·ªán"
        else:
            return "SELL", "T√≠n hi·ªáu B√ÅN ƒë∆∞·ª£c ph√°t hi·ªán"

    except Exception as e:
        error_message = f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh x·ª≠ l√Ω: {e}"
        st.error(error_message)
        return "ERROR", str(e)


# --- Giao di·ªán ch√≠nh ---
if st.sidebar.button("L·∫•y t√≠n hi·ªáu", type="primary"):
    data = load_data_for_signal(asset_class, symbol, tf)
    
    if data is not None:
        with st.spinner(f"ƒêang ph√¢n t√≠ch v√† t·∫°o t√≠n hi·ªáu cho {symbol}..."):
            signal, message = get_ml_signal(data)
            
            st.subheader(f"K·∫øt qu·∫£ cho {symbol}")
            
            if signal == "BUY":
                st.success(f"T√çN HI·ªÜU: {signal}")
            elif signal == "SELL":
                st.warning(f"T√çN HI·ªÜU: {signal}")
            elif signal == "HOLD":
                st.info(f"T√çN HI·ªÜU: {signal}")
            else: # ERROR
                st.error(f"T√çN HI·ªÜU: {signal}")

            st.write(f"Chi ti·∫øt: {message}")
    else:
        st.warning("Kh√¥ng th·ªÉ t·∫°o t√≠n hi·ªáu do kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu.")
else:
    st.info("üëà Vui l√≤ng c·∫•u h√¨nh v√† nh·∫•n 'L·∫•y t√≠n hi·ªáu' ·ªü thanh b√™n tr√°i.")
