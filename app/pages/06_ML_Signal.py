import streamlit as st
import pandas as pd
import joblib
import sys
import os
import pandas_ta as ta

# --- Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import CryptoLoader ---
try:
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if project_root not in sys.path:
        sys.path.append(project_root)
    from loaders.crypto_loader import CryptoLoader
except ImportError as e:
    st.error("üö® Kh√¥ng t√¨m th·∫•y module 'CryptoLoader'. H√£y ki·ªÉm tra l·∫°i c·∫•u tr√∫c th∆∞ m·ª•c d·ª± √°n.")
    st.stop()

# --- C·∫•u h√¨nh giao di·ªán Streamlit ---
st.set_page_config(page_title="ML Signal", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ T√≠n hi·ªáu Giao d·ªãch t·ª´ Machine Learning")
st.markdown("### D·ª± ƒëo√°n MUA/B√ÅN cho ng√†y ti·∫øp theo d·ª±a tr√™n m√¥ h√¨nh Random Forest")

# --- Load m√¥ h√¨nh ch·ªâ 1 l·∫ßn (cache) ---
@st.cache_resource
def load_model():
    model_path = os.path.join("app", "ml_signals", "rf_signal.pkl")
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y model t·∫°i: {model_path}")
    return joblib.load(model_path)

# --- H√†m t√≠nh t√≠n hi·ªáu v√† d·ªØ li·ªáu ---
@st.cache_data(ttl=300, show_spinner="ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")  # Cache d·ªØ li·ªáu trong 5 ph√∫t
def get_signal_and_data(symbol: str, timeframe: str, limit: int = 200):
    try:
        # 1. Load model
        model = load_model()

        # 2. T·∫£i d·ªØ li·ªáu
        df = CryptoLoader().fetch(symbol, timeframe, limit)
        if df.empty:
            return None, None

        # 3. T√≠nh ch·ªâ b√°o k·ªπ thu·∫≠t
        df.ta.rsi(length=14, append=True)
        df.ta.sma(length=20, append=True)
        df.rename(columns={'RSI_14': 'RSI', 'SMA_20': 'MA20'}, inplace=True)
        df.dropna(inplace=True)

        if df.empty:
            return None, None

        # 4. D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh
        df['Prediction'] = model.predict(df[["RSI", "MA20"]])
        df['Prediction'] = df['Prediction'].map({1: "BUY", 0: "SELL"})
        signal = df['Prediction'].iloc[-1]

        return signal, df.tail(30)

    except Exception as e:
        st.error(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
        return None, None

# --- Giao di·ªán ng∆∞·ªùi d√πng ---
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh T√≠n hi·ªáu")
symbol_input = st.sidebar.text_input("Nh·∫≠p m√£ giao d·ªãch:", "BTC/USDT").upper()
tf_input = st.sidebar.selectbox("Khung th·ªùi gian:", ["15m", "1h", "4h", "1d"], index=1)

if st.sidebar.button("üìà L·∫•y t√≠n hi·ªáu"):
    with st.spinner(f"üîç Ph√¢n t√≠ch t√≠n hi·ªáu cho {symbol_input}..."):
        current_signal, latest_data = get_signal_and_data(symbol_input, tf_input)

        if current_signal:
            st.subheader(f"T√≠n hi·ªáu hi·ªán t·∫°i cho {symbol_input}")

            if current_signal == "BUY":
                st.success("üü¢ **T√çN HI·ªÜU: MUA (BUY)**")
            else:
                st.error("üî¥ **T√çN HI·ªÜU: B√ÅN (SELL)**")

            st.markdown("---")
            st.subheader("üìä D·ªØ li·ªáu v√† d·ª± ƒëo√°n g·∫ßn nh·∫•t")

            def highlight_prediction(s):
                return ['background-color: #2E8B57' if v == "BUY" else 'background-color: #B22222' for v in s]

            st.dataframe(
                latest_data[['Close', 'RSI', 'MA20', 'Prediction']]
                .style.apply(highlight_prediction, subset=['Prediction'])
            )
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o t√≠n hi·ªáu cho m√£ n√†y.")
else:
    st.info("üëà Vui l√≤ng ch·ªçn m√£ v√† nh·∫•n 'L·∫•y t√≠n hi·ªáu' ƒë·ªÉ xem d·ª± ƒëo√°n.")
