import streamlit as st
import pandas as pd
import yfinance as yf
import time
import ccxt
import pandas_ta as ta
from sklearn.ensemble import RandomForestClassifier
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest, GetPortfolioHistoryRequest
from alpaca.trading.enums import OrderSide, TimeInForce
from alpaca.common.exceptions import APIError
import plotly.graph_objects as go
import traceback

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Live Trading Station", page_icon="üõ∞Ô∏è", layout="wide")

# --- T√πy ch·ªânh CSS ---
st.markdown("""
    <style>
        .stMetric { background-color: #161B22; border: 1px solid #30363D; padding: 15px; border-radius: 10px; text-align: center; }
        .block-container { padding-top: 2rem; }
    </style>
""", unsafe_allow_html=True)

st.title("üõ∞Ô∏è Live Trading Station")

# --- L·ªõp AlpacaTrader ---
class AlpacaTrader:
    def __init__(self, api_key, api_secret, paper=True):
        self.api, self.account, self.connected = None, None, False
        try:
            self.api = TradingClient(api_key, api_secret, paper=paper)
            self.account = self.api.get_account()
            self.connected = True
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi Alpaca: {e}")

    def get_account_info(self): return self.api.get_account()
    def get_positions(self): return self.api.get_all_positions()

    def place_order(self, symbol, qty, side, asset_type):
        try:
            if asset_type == "Crypto":
                symbol = symbol.replace('USDT', 'USD')
                if '/' not in symbol and len(symbol) > 3:
                    symbol = f"{symbol.replace('USD', '')}/USD"
            elif asset_type == "Forex":
                if '/' not in symbol and len(symbol) == 6:
                    symbol = f"{symbol[:3]}/{symbol[3:]}"
            
            market_order_data = MarketOrderRequest(
                symbol=symbol, qty=qty,
                side=OrderSide.BUY if side.lower() == 'buy' else OrderSide.SELL,
                time_in_force=TimeInForce.GTC
            )
            order = self.api.submit_order(order_data=market_order_data)
            st.success(f"ƒê√£ g·ª≠i y√™u c·∫ßu l·ªánh {side.upper()} {qty} ƒë∆°n v·ªã {symbol} th√†nh c√¥ng!")
            return order
        except Exception as e:
            st.error(f"L·ªói khi ƒë·∫∑t l·ªánh: {e}")
            return None

# --- C√°c h√†m kh√°c (Gi·ªØ nguy√™n) ---
@st.cache_data(ttl=300)
def load_data_for_live(symbol, asset_type):
    try:
        if asset_type == "Crypto":
            exchange = ccxt.kucoin()
            ohlcv = exchange.fetch_ohlcv(symbol, '1d', limit=500)
            data = pd.DataFrame(ohlcv, columns=['timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
            data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms'); data.set_index('timestamp', inplace=True)
        else:
            data = yf.download(symbol, period="2y", interval='1d', progress=False, auto_adjust=True)
            if isinstance(data.columns, pd.MultiIndex):
                data.columns = data.columns.get_level_values(0)
            data.columns = [str(col).capitalize() for col in data.columns]
        return data
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu cho {symbol}: {e}")
        return None

@st.cache_resource
def train_model_on_the_fly(data):
    # ... (Gi·ªØ nguy√™n)
    pass

def get_ml_signal(data, model):
    # ... (Gi·ªØ nguy√™n)
    pass

# --- Giao di·ªán Streamlit ---
# Kh·ªüi t·∫°o session state
if 'trader' not in st.session_state:
    st.session_state.trader = None

# Sidebar lu√¥n hi·ªÉn th·ªã
with st.sidebar:
    st.header("üîå K·∫øt n·ªëi S√†n Giao d·ªãch")
    account_type = st.radio("Ch·ªçn lo·∫°i t√†i kho·∫£n:", ["Paper Trading", "Live Trading"])
    api_key = st.text_input("API Key", type="password", key="api_key_input")
    api_secret = st.text_input("API Secret", type="password", key="api_secret_input")
    
    if st.button("K·∫øt n·ªëi", use_container_width=True):
        if api_key and api_secret:
            with st.spinner("ƒêang k·∫øt n·ªëi..."):
                st.session_state.trader = AlpacaTrader(api_key.strip(), api_secret.strip(), paper=(account_type == 'Paper Trading'))
            # Kh√¥ng c·∫ßn rerun() ·ªü ƒë√¢y, Streamlit s·∫Ω t·ª± ƒë·ªông ch·∫°y l·∫°i sau khi button click
        else:
            st.warning("Vui l√≤ng nh·∫≠p ƒë·ªß API Key v√† Secret.")

    # Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi
    if st.session_state.trader and st.session_state.trader.connected:
        st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi t√†i kho·∫£n {account_type}!")
    else:
        st.info("Nh·∫≠p API Key v√† Secret c·ªßa Alpaca ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

# S·ª¨A L·ªñI: C·∫•u tr√∫c l·∫°i ph·∫ßn hi·ªÉn th·ªã ch√≠nh
if st.session_state.trader and st.session_state.trader.connected:
    trader = st.session_state.trader
    
    # T·∫°o c√°c tab
    tab_titles = ["üìä T·ªïng quan", "üìà V·ªã th·∫ø", "üõ†Ô∏è Giao d·ªãch Th·ªß c√¥ng", "ü§ñ Giao d·ªãch T·ª± ƒë·ªông"]
    tab1, tab2, tab3, tab4 = st.tabs(tab_titles)
    
    # Tab 1: T·ªïng quan
    with tab1:
        st.subheader("T·ªïng quan t√†i kho·∫£n")
        try:
            account = trader.get_account_info()
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("Gi√° tr·ªã danh m·ª•c", f"${float(account.portfolio_value):,.2f}")
            col2.metric("S·ª©c mua", f"${float(account.buying_power):,.2f}")
            col3.metric("Ti·ªÅn m·∫∑t", f"${float(account.cash):,.2f}")
            col4.metric("Tr·∫°ng th√°i", account.status.value.upper())
            # ... (Ph·∫ßn bi·ªÉu ƒë·ªì gi·ªØ nguy√™n)
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√†i kho·∫£n: {e}")

    # Tab 2: V·ªã th·∫ø
    with tab2:
        st.subheader("C√°c v·ªã th·∫ø hi·ªán t·∫°i")
        if st.button("L√†m m·ªõi V·ªã th·∫ø", key="refresh_positions"):
            pass # Streamlit s·∫Ω t·ª± rerun v√† l·∫•y d·ªØ li·ªáu m·ªõi
        try:
            positions = trader.get_positions()
            if positions:
                positions_data = [{"Symbol": p.symbol, "Qty": float(p.qty), "Gi√° v√†o l·ªánh TB": f"{float(p.avg_entry_price):,.2f}", "Gi√° hi·ªán t·∫°i": f"{float(p.current_price):,.2f}", "L·ªùi/L·ªó ($)": f"{float(p.unrealized_pl):,.2f}"} for p in positions]
                st.dataframe(pd.DataFrame(positions_data), use_container_width=True)
            else:
                st.info("Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü.")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch v·ªã th·∫ø: {e}")
            
    # Tab 3: Giao d·ªãch Th·ªß c√¥ng
    with tab3:
        st.subheader("ƒê·∫∑t l·ªánh Th·ªã tr∆∞·ªùng (Market Order)")
        
        signal_to_execute = st.session_state.get('trade_signal_to_execute', None)
        default_asset_index = 0
        default_sym = "AAPL"
        
        if signal_to_execute:
            asset_map = {"Stocks": 0, "Crypto": 1, "Forex": 2}
            default_asset_index = asset_map.get(signal_to_execute['asset_class'], 0)
            default_sym = signal_to_execute['symbol']

        manual_asset_type = st.radio("Lo·∫°i t√†i s·∫£n:", ["Stocks", "Crypto", "Forex"], index=default_asset_index, horizontal=True)
        
        if not signal_to_execute:
            if manual_asset_type == "Crypto": default_sym = "BTC/USDT"
            elif manual_asset_type == "Forex": default_sym = "EUR/USD"
            else: default_sym = "AAPL"

        manual_symbol = st.text_input("M√£ giao d·ªãch:", value=default_sym, key="manual_symbol_input").upper()
        manual_qty = st.number_input("S·ªë l∆∞·ª£ng:", min_value=0.00001, value=1.0, step=1.0, format="%.5f")
        
        btn_col1, btn_col2 = st.columns(2)
        
        buy_type = "primary" if (signal_to_execute and signal_to_execute['side'] == 'MUA') else "secondary"
        sell_type = "primary" if (signal_to_execute and signal_to_execute['side'] == 'B√ÅN') else "secondary"

        if btn_col1.button("MUA (BUY)", use_container_width=True, type=buy_type):
            trader.place_order(symbol=manual_symbol, qty=manual_qty, side="buy", asset_type=manual_asset_type)
        if btn_col2.button("B√ÅN (SELL)", use_container_width=True, type=sell_type):
            trader.place_order(symbol=manual_symbol, qty=manual_qty, side="sell", asset_type=manual_asset_type)

        if signal_to_execute:
            st.session_state['trade_signal_to_execute'] = None
            st.success(f"ƒê√£ ƒëi·ªÅn s·∫µn th√¥ng tin. Vui l√≤ng x√°c nh·∫≠n l·ªánh.")
    
    # Tab 4: Giao d·ªãch T·ª± ƒë·ªông
    with tab4:
        # ... (code tab Giao d·ªãch T·ª± ƒë·ªông gi·ªØ nguy√™n)
        pass
else:
    # Th√¥ng b√°o n√†y ch·ªâ hi·ªÉn th·ªã khi ch∆∞a k·∫øt n·ªëi
    st.info("üëà Vui l√≤ng k·∫øt n·ªëi v·ªõi S√†n Giao d·ªãch Alpaca ·ªü thanh b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")