import streamlit as st
import pandas as pd
import yfinance as yf
import time
import ccxt
import pandas_ta as ta
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest, GetPortfolioHistoryRequest
from alpaca.trading.enums import OrderSide, TimeInForce, OrderStatus
from alpaca.common.exceptions import APIError
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import traceback
from datetime import datetime, timedelta
import requests
import re
from textblob import TextBlob

try:
    import MetaTrader5 as mt5
    MT5_AVAILABLE = True
except ImportError:
    MT5_AVAILABLE = False
    st.warning("‚ö†Ô∏è Th∆∞ vi·ªán MetaTrader5 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·∫°y: pip install MetaTrader5")

# --- Page Configuration ---
st.set_page_config(
    page_title="üöÄ Live Trading Pro", 
    page_icon="üõ∞Ô∏è", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Custom CSS ---
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
    }
    .header-gradient {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 3rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 1rem;
    }
    .dashboard-card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 2rem;
        transition: all 0.3s ease;
    }
    .metric-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        padding: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        text-align: center;
        transition: all 0.3s ease;
    }
    .metric-card:hover {
        transform: translateY(-5px);
        border-color: #667eea;
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.2);
    }
    .position-group {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .position-item {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid #00ff88;
    }
    .position-item.sell {
        border-left-color: #ff4444;
    }
    .feature-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: white;
        margin: 0.5rem 0;
    }
    .metric-label {
        color: #8898aa;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .connection-panel {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        padding: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 2rem;
    }
    .tab-container {
        background: rgba(255, 255, 255, 0.02);
        border-radius: 15px;
        padding: 2rem;
        margin-top: 1rem;
    }
    .divider {
        height: 2px;
        background: linear-gradient(90deg, transparent, #667eea, transparent);
        margin: 2rem 0;
        border: none;
    }
    .badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        margin-right: 0.5rem;
    }
    .badge-stock { background: linear-gradient(135deg, #28a745, #7ae582); color: white; }
    .badge-crypto { background: linear-gradient(135deg, #f7931a, #ffc46c); color: black; }
    .badge-forex { background: linear-gradient(135deg, #007bff, #6cb2ff); color: white; }
    .badge-profit { background: linear-gradient(135deg, #00ff88, #00cc6a); color: white; }
    .badge-loss { background: linear-gradient(135deg, #ff4444, #cc0000); color: white; }
    .order-success {
        background: rgba(0, 255, 136, 0.1);
        border: 1px solid #00ff88;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .order-error {
        background: rgba(255, 68, 68, 0.1);
        border: 1px solid #ff4444;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .warning-box {
        background: rgba(255, 193, 7, 0.1);
        border: 1px solid #ffc107;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .position-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        padding: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        margin: 0.5rem 0;
        transition: all 0.3s ease;
        cursor: pointer;
    }
    .position-card:hover {
        transform: translateY(-2px);
        border-color: #667eea;
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
    }
    .position-card.buy { border-left: 4px solid #00ff88; }
    .position-card.sell { border-left: 4px solid #ff4444; }
    .pending-order {
        background: rgba(255, 193, 7, 0.1);
        border: 1px solid #ffc107;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .mt5-order-panel {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .mt5-button-buy {
        background: linear-gradient(135deg, #00ff88, #00cc6a);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: bold;
        width: 100%;
        margin: 5px 0;
    }
    .mt5-button-sell {
        background: linear-gradient(135deg, #ff4444, #cc0000);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: bold;
        width: 100%;
        margin: 5px 0;
    }
    .mt5-button-cancel {
        background: linear-gradient(135deg, #ff9500, #ff6b00);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# --- Header ---
st.markdown('<div class="header-gradient">üöÄ Live Trading Pro</div>', unsafe_allow_html=True)
st.markdown('<div style="text-align: center; color: #8898aa; font-size: 1.2rem; margin-bottom: 3rem;">Professional Algorithmic Trading Platform</div>', unsafe_allow_html=True)

# --- H√ÄM T·∫¢I D·ªÆ LI·ªÜU ƒê√É S·ª¨A HO√ÄN TO√ÄN ---
def safe_yfinance_download(symbol, period="60d", interval="1d"):
    """H√†m t·∫£i d·ªØ li·ªáu an to√†n t·ª´ yfinance kh√¥ng b·ªã l·ªói format"""
    try:
        # Chu·∫©n h√≥a symbol
        clean_symbol = symbol.upper().replace('USDT', '').replace('USD', '').replace('/', '')
        
        # Th·ª≠ c√°c ƒë·ªãnh d·∫°ng symbol kh√°c nhau
        symbol_variants = [
            clean_symbol,
            f"{clean_symbol}-USD",
            symbol,
            symbol.replace('USDT', '-USD'),
            symbol.replace('USD', '-USD')
        ]
        
        for sym in symbol_variants:
            try:
                data = yf.download(sym, period=period, interval=interval, progress=False, auto_adjust=True)
                if not data.empty and len(data) > 0:
                    # Chu·∫©n h√≥a columns
                    if isinstance(data.columns, pd.MultiIndex):
                        data.columns = data.columns.get_level_values(0)
                    
                    # ƒê·∫£m b·∫£o c√≥ column Close
                    if 'Close' not in data.columns and len(data.columns) > 0:
                        data = data.rename(columns={data.columns[0]: 'Close'})
                    
                    return data
            except Exception as e:
                continue
                
        return pd.DataFrame()
        
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu cho {symbol}: {str(e)}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def load_data_for_live(symbol, asset_type):
    """H√†m t·∫£i d·ªØ li·ªáu ch√≠nh - ƒê√É S·ª¨A HO√ÄN TO√ÄN L·ªñI FORMAT"""
    try:
        if asset_type == "Crypto":
            data = safe_yfinance_download(symbol, "60d", "1d")
        else:
            data = safe_yfinance_download(symbol, "2y", "1d")
        
        # Ki·ªÉm tra v√† chu·∫©n h√≥a d·ªØ li·ªáu tr·∫£ v·ªÅ
        if data is None or data.empty:
            return pd.DataFrame()
            
        # ƒê·∫£m b·∫£o c√°c columns c·∫ßn thi·∫øt t·ªìn t·∫°i
        required_columns = ['Close', 'Open', 'High', 'Low', 'Volume']
        for col in required_columns:
            if col not in data.columns:
                if len(data.columns) >= 5:  # N·∫øu c√≥ ƒë·ªß columns
                    data.columns = required_columns[:len(data.columns)]
                else:
                    # T·∫°o columns m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                    if 'Close' not in data.columns:
                        data['Close'] = data.iloc[:, 0] if len(data.columns) > 0 else 0
        
        return data
        
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu cho {symbol}: {str(e)}")
        return pd.DataFrame()

@st.cache_data(ttl=60)
def get_live_crypto_price_ccxt(symbol):
    """
    L·∫•y gi√° crypto TH·ª∞C T·∫æ t·ª´ CCXT (c√°c s√†n)
    Tr·∫£ v·ªÅ: {'price': 12345.6, 'change_pct': 2.5}
    """
    # Chuy·ªÉn ƒë·ªãnh d·∫°ng (v√≠ d·ª•: BTCUSD -> BTC/USDT, ETH/USD -> ETH/USDT)
    symbol = symbol.upper().replace('USD', '/USDT').replace('/USD', '/USDT')
    if "USDT" not in symbol:
        symbol = symbol + "/USDT"

    # Danh s√°ch c√°c s√†n ƒë·ªÉ th·ª≠
    exchanges = [
        ccxt.bybit(), 
        ccxt.binance(), 
        ccxt.okx(), 
        ccxt.gateio()
    ]
    
    for exchange in exchanges:
        try:
            # T·∫£i ticker (th√¥ng tin gi√°)
            ticker = exchange.fetch_ticker(symbol)
            if ticker and 'last' in ticker:
                price = ticker['last']
                
                # C·ªë g·∫Øng l·∫•y % thay ƒë·ªïi
                change_pct = ticker.get('percentage', 0.0)
                
                # N·∫øu s√†n kh√¥ng c√≥ 'percentage', th·ª≠ t·ª± t√≠nh
                if change_pct == 0.0 and 'open' in ticker:
                    if ticker['open'] > 0:
                        change_pct = ((price - ticker['open']) / ticker['open']) * 100

                return {'price': price, 'change_pct': change_pct}
        except Exception as e:
            continue  # B·ªè qua v√† th·ª≠ s√†n ti·∫øp theo
            
    # N·∫øu t·∫•t c·∫£ s√†n ƒë·ªÅu l·ªói
    st.warning(f"Kh√¥ng th·ªÉ l·∫•y gi√° live cho {symbol} t·ª´ CCXT.")
    return None

# --- L·ªõp MT5Trader v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng ---
class MT5Trader:
    def __init__(self):
        self.connected = False
        self.account_info = None
        
    def connect(self, account, password, server, path_to_mt5):
        """K·∫øt n·ªëi v·ªõi MT5"""
        try:
            if not MT5_AVAILABLE:
                st.error("Th∆∞ vi·ªán MetaTrader5 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
                return False
                
            # Kh·ªüi t·∫°o MT5
            if not mt5.initialize(path=path_to_mt5, login=account, password=password, server=server):
                st.error(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o MT5: {mt5.last_error()}")
                return False
            
            self.connected = True
            self.account_info = mt5.account_info()
            st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi MT5 th√†nh c√¥ng! T√†i kho·∫£n: {self.account_info.login}")
            return True
            
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MT5: {e}")
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi MT5"""
        if self.connected:
            mt5.shutdown()
            self.connected = False
            st.success("‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi MT5")
    
    def get_account_info(self):
        """L·∫•y th√¥ng tin t√†i kho·∫£n"""
        if not self.connected:
            return None
        return mt5.account_info()
    
    def get_symbols(self):
        """L·∫•y danh s√°ch symbol c√≥ s·∫µn"""
        if not self.connected:
            return []
        symbols = mt5.symbols_get()
        return [s.name for s in symbols] if symbols else []
    
    def get_symbol_info(self, symbol):
        """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa symbol"""
        if not self.connected:
            return None
        return mt5.symbol_info(symbol)
    
    def get_tick_data(self, symbol):
        """L·∫•y d·ªØ li·ªáu tick hi·ªán t·∫°i"""
        if not self.connected:
            return None
        return mt5.symbol_info_tick(symbol)
    
    def get_ohlc_data(self, symbol, timeframe=mt5.TIMEFRAME_M15, count=100):
        """L·∫•y d·ªØ li·ªáu OHLC cho bi·ªÉu ƒë·ªì"""
        if not self.connected:
            return None
        
        rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, count)
        if rates is None:
            return None
            
        df = pd.DataFrame(rates)
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.set_index('time', inplace=True)
        return df
    
    def get_positions(self):
        """L·∫•y danh s√°ch v·ªã th·∫ø ƒëang m·ªü"""
        if not self.connected:
            return []
        return mt5.positions_get()
    
    def get_orders(self):
        """L·∫•y danh s√°ch l·ªánh ch·ªù"""
        if not self.connected:
            return []
        return mt5.orders_get()
    
    def place_order(self, symbol, volume, order_type, price=0, sl=0, tp=0, deviation=20):
        """ƒê·∫∑t l·ªánh tr√™n MT5"""
        if not self.connected:
            return None
            
        # L·∫•y th√¥ng tin symbol
        symbol_info = mt5.symbol_info(symbol)
        if symbol_info is None:
            st.error(f"Symbol {symbol} kh√¥ng t·ªìn t·∫°i")
            return None
        
        # Ki·ªÉm tra symbol c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not symbol_info.visible:
            if not mt5.symbol_select(symbol, True):
                st.error(f"Kh√¥ng th·ªÉ ch·ªçn symbol {symbol}")
                return None
        
        # L·∫•y gi√° hi·ªán t·∫°i
        tick = mt5.symbol_info_tick(symbol)
        if tick is None:
            st.error(f"Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}")
            return None
        
        # X√°c ƒë·ªãnh lo·∫°i l·ªánh v√† gi√°
        if order_type.upper() == "BUY":
            order_type_mt5 = mt5.ORDER_TYPE_BUY
            order_price = tick.ask
        elif order_type.upper() == "SELL":
            order_type_mt5 = mt5.ORDER_TYPE_SELL
            order_price = tick.bid
        else:
            st.error("Lo·∫°i l·ªánh kh√¥ng h·ª£p l·ªá")
            return None
        
        # N·∫øu price ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (cho l·ªánh limit/stop)
        if price > 0:
            order_price = price
        
        # T·∫°o request
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": volume,
            "type": order_type_mt5,
            "price": order_price,
            "sl": sl,
            "tp": tp,
            "deviation": deviation,
            "magic": 234000,
            "comment": "Order from Streamlit App",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }
        
        # G·ª≠i l·ªánh
        result = mt5.order_send(request)
        return result
    
    def place_pending_order(self, symbol, volume, order_type, price, sl=0, tp=0, expiration=0):
        """ƒê·∫∑t l·ªánh ch·ªù"""
        if not self.connected:
            return None
            
        # X√°c ƒë·ªãnh lo·∫°i l·ªánh ch·ªù
        order_types = {
            "BUY_LIMIT": mt5.ORDER_TYPE_BUY_LIMIT,
            "SELL_LIMIT": mt5.ORDER_TYPE_SELL_LIMIT,
            "BUY_STOP": mt5.ORDER_TYPE_BUY_STOP,
            "SELL_STOP": mt5.ORDER_TYPE_SELL_STOP
        }
        
        if order_type not in order_types:
            st.error("Lo·∫°i l·ªánh ch·ªù kh√¥ng h·ª£p l·ªá")
            return None
        
        request = {
            "action": mt5.TRADE_ACTION_PENDING,
            "symbol": symbol,
            "volume": volume,
            "type": order_types[order_type],
            "price": price,
            "sl": sl,
            "tp": tp,
            "deviation": 20,
            "magic": 234000,
            "comment": "Pending Order from Streamlit",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }
        
        if expiration > 0:
            request["expiration"] = expiration
        
        result = mt5.order_send(request)
        return result
    
    def close_position(self, ticket):
        """ƒê√≥ng v·ªã th·∫ø"""
        if not self.connected:
            return None
            
        position = mt5.positions_get(ticket=ticket)
        if not position:
            st.error(f"Kh√¥ng t√¨m th·∫•y v·ªã th·∫ø v·ªõi ticket {ticket}")
            return None
        
        position = position[0]
        symbol = position.symbol
        volume = position.volume
        order_type = mt5.ORDER_TYPE_SELL if position.type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY
        
        tick = mt5.symbol_info_tick(symbol)
        if tick is None:
            return None
        
        price = tick.ask if order_type == mt5.ORDER_TYPE_SELL else tick.bid
        
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": volume,
            "type": order_type,
            "position": ticket,
            "price": price,
            "deviation": 20,
            "magic": 234000,
            "comment": "Close position",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }
        
        result = mt5.order_send(request)
        return result
    
    def cancel_order(self, ticket):
        """H·ªßy l·ªánh ch·ªù"""
        if not self.connected:
            return None
            
        request = {
            "action": mt5.TRADE_ACTION_REMOVE,
            "order": ticket,
        }
        
        result = mt5.order_send(request)
        return result

# --- C√°c h√†m hi·ªÉn th·ªã cho MT5 ---
def display_mt5_position(position):
    """Hi·ªÉn th·ªã v·ªã th·∫ø MT5"""
    try:
        symbol = position.symbol
        volume = position.volume
        profit = position.profit
        price_open = position.price_open
        price_current = position.price_current
        sl = position.sl
        tp = position.tp
        type_str = "BUY" if position.type == mt5.ORDER_TYPE_BUY else "SELL"
        
        pl_class = "" if profit >= 0 else "sell"
        badge_class = "badge-profit" if profit >= 0 else "badge-loss"
        
        st.markdown(f"""
        <div class="position-item {pl_class}">
            <div style="display: flex; justify-content: between; align-items: center;">
                <div>
                    <strong>{symbol}</strong>
                    <span class="badge {badge_class}">{type_str} {volume:.2f} lots</span>
                </div>
                <div style="text-align: right;">
                    <div style="color: {'#00ff88' if profit >= 0 else '#ff4444'}; font-weight: bold;">
                        ${profit:.2f}
                    </div>
                    <div style="font-size: 0.8em; color: #8898aa;">
                        Open: ${price_open:.5f} ‚Ä¢ Current: ${price_current:.5f}
                    </div>
                    <div style="font-size: 0.7em; color: #8898aa;">
                        SL: ${sl:.5f if sl > 0 else 'None'} ‚Ä¢ TP: ${tp:.5f if tp > 0 else 'None'}
                    </div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t ƒë√≥ng l·ªánh
        if st.button(f"üîí ƒê√≥ng {symbol}", key=f"close_{position.ticket}", use_container_width=True):
            result = mt5_trader.close_position(position.ticket)
            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                st.success(f"‚úÖ ƒê√£ ƒë√≥ng v·ªã th·∫ø {symbol}")
                time.sleep(2)
                st.rerun()
                
    except Exception as e:
        st.error(f"L·ªói hi·ªÉn th·ªã position: {e}")

def display_mt5_order(order):
    """Hi·ªÉn th·ªã l·ªánh ch·ªù MT5"""
    try:
        symbol = order.symbol
        volume = order.volume_initial
        price_open = order.price_open
        sl = order.sl
        tp = order.tp
        
        order_types = {
            2: "BUY_LIMIT",
            3: "SELL_LIMIT", 
            4: "BUY_STOP",
            5: "SELL_STOP"
        }
        type_str = order_types.get(order.type, "UNKNOWN")
        
        st.markdown(f"""
        <div class="pending-order">
            <div style="flex: 1;">
                <strong>{symbol}</strong> - {type_str}
                <div style="font-size: 0.9em; color: #8898aa;">
                    Volume: {volume:.2f} ‚Ä¢ Price: ${price_open:.5f}
                </div>
                <div style="font-size: 0.8em; color: #8898aa;">
                    SL: ${sl:.5f if sl > 0 else 'None'} ‚Ä¢ TP: ${tp:.5f if tp > 0 else 'None'}
                </div>
            </div>
            <div>
                <button class="mt5-button-cancel" onclick="this.disabled=true; this.innerHTML='ƒêang h·ªßy...'">
                    ‚ùå H·ªßy
                </button>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"L·ªói hi·ªÉn th·ªã order: {e}")

def create_mt5_chart(symbol, timeframe=mt5.TIMEFRAME_M15, count=100):
    """T·∫°o bi·ªÉu ƒë·ªì MT5"""
    try:
        if 'mt5_trader' not in st.session_state or not st.session_state.mt5_trader.connected:
            return None
            
        data = st.session_state.mt5_trader.get_ohlc_data(symbol, timeframe, count)
        if data is None or data.empty:
            return None
        
        # T·∫°o bi·ªÉu ƒë·ªì n·∫øn
        fig = go.Figure(data=[go.Candlestick(
            x=data.index,
            open=data['open'],
            high=data['high'],
            low=data['low'],
            close=data['close'],
            name=symbol
        )])
        
        fig.update_layout(
            title=f"{symbol} - Bi·ªÉu ƒë·ªì gi√°",
            xaxis_title="Th·ªùi gian",
            yaxis_title="Gi√°",
            template="plotly_dark",
            height=500,
            showlegend=False
        )
        
        return fig
        
    except Exception as e:
        st.error(f"L·ªói t·∫°o bi·ªÉu ƒë·ªì: {e}")
        return None

# --- L·ªõp AlpacaTrader ƒê√É S·ª¨A L·ªñI HO√ÄN TO√ÄN ---
class AlpacaTrader:
    def __init__(self, api_key, api_secret, paper=True):
        self.api, self.account, self.connected = None, None, False
        try:
            self.api = TradingClient(api_key, api_secret, paper=paper)
            self.account = self.api.get_account()
            self.connected = True
            st.success("‚úÖ K·∫øt n·ªëi Alpaca th√†nh c√¥ng!")
        except Exception as e:
            st.error(f"‚ùå L·ªói k·∫øt n·ªëi Alpaca: {e}")

    def get_account_info(self): 
        try:
            return self.api.get_account()
        except Exception as e:
            st.error(f"L·ªói l·∫•y th√¥ng tin t√†i kho·∫£n: {e}")
            return None
    
    def get_positions(self): 
        try:
            return self.api.get_all_positions()
        except Exception as e:
            st.error(f"L·ªói l·∫•y danh s√°ch positions: {e}")
            return []
    
    def get_orders(self, status_filter=None):
        """L·∫•y danh s√°ch c√°c l·ªánh - ƒê√É S·ª¨A HO√ÄN TO√ÄN"""
        try:
            # L·∫•y t·∫•t c·∫£ orders
            all_orders = self.api.get_orders()
            
            if status_filter:
                # Filter manual d·ª±a tr√™n status
                if status_filter == 'open':
                    return [order for order in all_orders if order.status in [
                        OrderStatus.ACCEPTED, 
                        OrderStatus.NEW, 
                        OrderStatus.PARTIALLY_FILLED,
                        OrderStatus.PENDING_NEW
                    ]]
                elif status_filter == 'closed':
                    return [order for order in all_orders if order.status in [
                        OrderStatus.FILLED, 
                        OrderStatus.CANCELED, 
                        OrderStatus.REJECTED,
                        OrderStatus.EXPIRED
                    ]]
            
            return all_orders
            
        except Exception as e:
            st.error(f"L·ªói l·∫•y danh s√°ch orders: {e}")
            return []

    def cancel_order(self, order_id):
        """H·ªßy l·ªánh ch·ªù"""
        try:
            self.api.cancel_order_by_id(order_id)
            st.success(f"‚úÖ ƒê√£ h·ªßy l·ªánh {order_id}")
            time.sleep(1)  # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ update
            return True
        except Exception as e:
            st.error(f"L·ªói h·ªßy order {order_id}: {e}")
            return False

    def get_portfolio_history(self, period="1M"):
        """L·∫•y l·ªãch s·ª≠ portfolio t·ª´ Alpaca"""
        try:
            params = GetPortfolioHistoryRequest(period=period)
            history = self.api.get_portfolio_history(params)
            return history
        except Exception as e:
            st.error(f"L·ªói l·∫•y l·ªãch s·ª≠ portfolio: {e}")
            return None

    def place_order(self, symbol, qty, side, asset_type):
        """ƒê·∫∑t l·ªánh - ƒê√É S·ª¨A HO√ÄN TO√ÄN"""
        try:
            # ƒê·ªãnh d·∫°ng symbol theo lo·∫°i t√†i s·∫£n
            formatted_symbol = self._format_symbol(symbol, asset_type)
            
            st.info(f"üîÑ ƒêang ƒë·∫∑t l·ªánh {side.upper()} cho {qty} {formatted_symbol}...")
            
            # X·ª≠ l√Ω quantity cho c√°c lo·∫°i t√†i s·∫£n
            if asset_type == "Stocks":
                qty = int(qty)  # Stocks ph·∫£i l√† s·ªë nguy√™n
            
            # --- S·ª¨A L·ªñI ·ªû ƒê√ÇY ---
            #
            # Logic C≈® (G√ÇY L·ªñI):
            # time_in_force = TimeInForce.DAY
            #
            # Logic M·ªöI (ƒê√É S·ª¨A):
            # Crypto y√™u c·∫ßu GTC (Good-Til-Canceled).
            # C·ªï phi·∫øu/Forex n√™n d√πng DAY ƒë·ªÉ tr√°nh l·ªói wash trade khi th·ªã tr∆∞·ªùng ƒë√≥ng c·ª≠a.
            
            if asset_type == "Crypto":
                time_in_force = TimeInForce.GTC  # S·ª≠a cho Crypto
            else:
                time_in_force = TimeInForce.DAY   # Gi·ªØ nguy√™n cho Stocks/Forex
            
            # --- K·∫æT TH√öC S·ª¨A L·ªñI ---
            
            market_order_data = MarketOrderRequest(
                symbol=formatted_symbol, 
                qty=qty,
                side=OrderSide.BUY if side.lower() == 'buy' else OrderSide.SELL,
                time_in_force=time_in_force  # ƒê√£ s·ª≠a
            )
            
            order = self.api.submit_order(order_data=market_order_data)
            st.success(f"‚úÖ ƒê√£ ƒë·∫∑t l·ªánh {side.upper()} th√†nh c√¥ng cho {qty} {formatted_symbol}!")
            st.success(f"üìã ID l·ªánh: {order.id}")
            return order
            
        except Exception as e:
            error_msg = f"‚ùå L·ªói ƒë·∫∑t l·ªánh: {e}"
            st.error(error_msg)
            st.error(f"Symbol: {formatted_symbol}, Asset Type: {asset_type}, Quantity: {qty}")
            return None

    def _format_symbol(self, symbol, asset_type):
        """ƒê·ªãnh d·∫°ng symbol theo lo·∫°i t√†i s·∫£n"""
        symbol = symbol.upper().strip()
        
        if asset_type == "Crypto":
            if '/' in symbol:
                return symbol.replace('/', '')
            elif symbol.endswith('USDT'):
                return symbol.replace('USDT', 'USD')
            elif symbol.endswith('USD'):
                return symbol
            else:
                return f"{symbol}USD"
        elif asset_type == "Forex":
            if '/' in symbol:
                return symbol.replace('/', '')
            elif len(symbol) == 6:
                return symbol
            else:
                return symbol
        else:  # Stocks
            return symbol

# --- ADVANCED RISK MANAGEMENT DASHBOARD ---
class RiskManager:
    def __init__(self, trader):
        self.trader = trader
        
    def calculate_var(self, positions, confidence_level=0.95, periods=252):
        """T√≠nh Value at Risk"""
        try:
            account_info = self.trader.get_account_info()
            if not account_info:
                return {'1d': 0, '1w': 0, '1m': 0}
                
            portfolio_value = float(account_info.portfolio_value)
            annual_volatility = 0.20
            daily_volatility = annual_volatility / np.sqrt(periods)
            
            var_1d = portfolio_value * daily_volatility * 2.33
            var_1w = var_1d * np.sqrt(5)
            var_1m = var_1d * np.sqrt(21)
            
            return {
                '1d': var_1d,
                '1w': var_1w,
                '1m': var_1m
            }
        except Exception as e:
            return {'1d': 0, '1w': 0, '1m': 0}
    
    def calculate_max_drawdown(self, portfolio_history):
        """T√≠nh maximum drawdown"""
        try:
            if portfolio_history and hasattr(portfolio_history, 'equity'):
                equity = portfolio_history.equity
                if equity and len(equity) > 0:
                    peak = equity[0]
                    max_dd = 0
                    
                    for value in equity:
                        if value > peak:
                            peak = value
                        dd = (peak - value) / peak
                        if dd > max_dd:
                            max_dd = dd
                    
                    return max_dd * 100
            return 0
        except Exception as e:
            return 0
    
    def calculate_sharpe_ratio(self, returns_series=None):
        """T√≠nh Sharpe ratio"""
        try:
            annual_return = 0.08
            risk_free_rate = 0.02
            annual_volatility = 0.20
            
            sharpe = (annual_return - risk_free_rate) / annual_volatility
            return sharpe
        except Exception as e:
            return 0
    
    def calculate_drawdown_series(self, portfolio_history):
        """T√≠nh drawdown series cho bi·ªÉu ƒë·ªì"""
        try:
            if portfolio_history and hasattr(portfolio_history, 'equity'):
                equity = portfolio_history.equity
                if equity and len(equity) > 0:
                    peak = equity[0]
                    drawdowns = []
                    
                    for value in equity:
                        if value > peak:
                            peak = value
                        dd = (peak - value) / peak * 100
                        drawdowns.append(dd)
                    
                    return drawdowns
            return [0]
        except Exception as e:
            return [0]

def create_risk_dashboard(trader):
    """Create comprehensive risk management dashboard"""
    
    risk_manager = RiskManager(trader)
    
    portfolio_var = risk_manager.calculate_var(trader.get_positions())
    portfolio_history = trader.get_portfolio_history()
    max_drawdown = risk_manager.calculate_max_drawdown(portfolio_history)
    sharpe_ratio = risk_manager.calculate_sharpe_ratio()
    
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('Value at Risk', 'Portfolio Drawdown', 'Risk Metrics', 'Position Concentration'),
        specs=[[{"type": "bar"}, {"type": "scatter"}], [{"type": "indicator"}, {"type": "pie"}]]
    )
    
    fig.add_trace(go.Bar(
        x=['1 Day', '1 Week', '1 Month'],
        y=[portfolio_var['1d'], portfolio_var['1w'], portfolio_var['1m']],
        name='Value at Risk',
        marker_color=['#ff6b6b', '#ffa726', '#66bb6a']
    ), row=1, col=1)
    
    drawdown_series = risk_manager.calculate_drawdown_series(portfolio_history)
    fig.add_trace(go.Scatter(
        y=drawdown_series,
        name='Portfolio Drawdown',
        line=dict(color='red'),
        fill='tozeroy',
        fillcolor='rgba(255,0,0,0.1)'
    ), row=1, col=2)
    
    fig.add_trace(go.Indicator(
        mode = "gauge+number+delta",
        value = sharpe_ratio,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Sharpe Ratio"},
        gauge = {
            'axis': {'range': [None, 3]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 1], 'color': "lightgray"},
                {'range': [1, 2], 'color': "gray"},
                {'range': [2, 3], 'color': "darkgray"}],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 1.5}}
    ), row=2, col=1)
    
    positions = trader.get_positions()
    if positions:
        symbols = [p.symbol for p in positions]
        values = [float(p.market_value) for p in positions]
        fig.add_trace(go.Pie(
            labels=symbols,
            values=values,
            name="Position Concentration"
        ), row=2, col=2)
    
    fig.update_layout(
        title='Risk Management Dashboard',
        height=600,
        showlegend=False,
        template="plotly_dark"
    )
    
    return fig, {
        'var_1d': portfolio_var['1d'],
        'max_drawdown': max_drawdown,
        'sharpe_ratio': sharpe_ratio
    }

# --- PERFORMANCE ANALYTICS & REPORTING ---
class TradeJournal:
    def __init__(self):
        self.trades = []
    
    def add_trade(self, trade_data):
        self.trades.append(trade_data)
    
    def get_timeline(self):
        return [t['timestamp'] for t in self.trades]
    
    def get_equity_curve(self):
        equity = 10000
        curve = []
        for trade in self.trades:
            equity += trade.get('pnl', 0)
            curve.append(equity)
        return curve

class PerformanceAnalytics:
    def __init__(self, trader):
        self.trader = trader
        self.trade_journal = TradeJournal()
    
    def calculate_daily_pnl(self):
        try:
            positions = self.trader.get_positions()
            daily_pnl = sum(float(p.unrealized_pl) for p in positions) if positions else 0
            return daily_pnl
        except:
            return 0
    
    def calculate_win_rate(self):
        if len(self.trade_journal.trades) == 0:
            return 0
        winning_trades = sum(1 for trade in self.trade_journal.trades if trade.get('pnl', 0) > 0)
        return (winning_trades / len(self.trade_journal.trades)) * 100
    
    def calculate_profit_factor(self):
        if len(self.trade_journal.trades) == 0:
            return 0
            
        gross_profit = sum(trade.get('pnl', 0) for trade in self.trade_journal.trades if trade.get('pnl', 0) > 0)
        gross_loss = abs(sum(trade.get('pnl', 0) for trade in self.trade_journal.trades if trade.get('pnl', 0) < 0))
        
        if gross_loss == 0:
            return float('inf')
        return gross_profit / gross_loss
    
    def calculate_avg_trade_duration(self):
        if len(self.trade_journal.trades) == 0:
            return "N/A"
        
        durations = []
        for trade in self.trade_journal.trades:
            if 'entry_time' in trade and 'exit_time' in trade:
                duration = (trade['exit_time'] - trade['entry_time']).total_seconds() / 3600
                durations.append(duration)
        
        if durations:
            avg_hours = sum(durations) / len(durations)
            return f"{avg_hours:.1f} hours"
        return "N/A"
    
    def identify_best_strategy(self):
        strategies = {}
        for trade in self.trade_journal.trades:
            strategy = trade.get('strategy', 'Unknown')
            pnl = trade.get('pnl', 0)
            if strategy not in strategies:
                strategies[strategy] = {'total_pnl': 0, 'count': 0}
            strategies[strategy]['total_pnl'] += pnl
            strategies[strategy]['count'] += 1
        
        if strategies:
            best_strategy = max(strategies.items(), key=lambda x: x[1]['total_pnl'])
            return best_strategy[0]
        return "No strategies"

    def generate_daily_report(self):
        report = {
            'daily_pnl': self.calculate_daily_pnl(),
            'win_rate': self.calculate_win_rate(),
            'profit_factor': self.calculate_profit_factor(),
            'avg_trade_duration': self.calculate_avg_trade_duration(),
            'sharpe_ratio': RiskManager(self.trader).calculate_sharpe_ratio(),
            'max_drawdown': RiskManager(self.trader).calculate_max_drawdown(self.trader.get_portfolio_history()),
            'best_performing_strategy': self.identify_best_strategy(),
            'total_trades': len(self.trade_journal.trades)
        }
        
        return report
    
    def create_performance_charts(self, report):
        fig_equity = go.Figure()
        if self.trade_journal.get_equity_curve():
            fig_equity.add_trace(go.Scatter(
                x=self.trade_journal.get_timeline(),
                y=self.trade_journal.get_equity_curve(),
                name='Equity Curve',
                line=dict(color='#00ff00', width=3)
            ))
        
        fig_gauges = make_subplots(
            rows=1, cols=3,
            specs=[[{"type": "indicator"}, {"type": "indicator"}, {"type": "indicator"}]],
            subplot_titles=('Win Rate', 'Profit Factor', 'Sharpe Ratio')
        )
        
        fig_gauges.add_trace(go.Indicator(
            mode="gauge+number",
            value=report['win_rate'],
            title={'text': "Win Rate %"},
            gauge={'axis': {'range': [0, 100]},
                  'bar': {'color': "green"},
                  'steps': [{'range': [0, 50], 'color': "red"},
                           {'range': [50, 75], 'color': "yellow"},
                           {'range': [75, 100], 'color': "green"}]}
        ), row=1, col=1)
        
        fig_gauges.add_trace(go.Indicator(
            mode="number",
            value=report['profit_factor'],
            title={'text': "Profit Factor"}
        ), row=1, col=2)
        
        fig_gauges.add_trace(go.Indicator(
            mode="number",
            value=report['sharpe_ratio'],
            title={'text': "Sharpe Ratio"}
        ), row=1, col=3)
        
        fig_gauges.update_layout(height=300, template="plotly_dark")
        
        return fig_equity, fig_gauges

# --- C√°c h√†m h·ªó tr·ª£ ---
def get_asset_badge(asset_type):
    """Tr·∫£ v·ªÅ badge CSS class cho t·ª´ng lo·∫°i t√†i s·∫£n"""
    if asset_type == "Crypto":
        return "badge-crypto"
    elif asset_type == "Forex":
        return "badge-forex"
    else:
        return "badge-stock"

def display_position(position):
    """Hi·ªÉn th·ªã position"""
    try:
        symbol = position.symbol
        qty = float(position.qty)
        avg_entry = float(position.avg_entry_price)
        current_price = float(position.current_price)
        unrealized_pl = float(position.unrealized_pl)
        pl_percent = (unrealized_pl / (avg_entry * qty)) * 100 if avg_entry * qty != 0 else 0
        
        pl_class = "" if unrealized_pl >= 0 else "sell"
        badge_class = "badge-profit" if unrealized_pl >= 0 else "badge-loss"
        
        st.markdown(f"""
        <div class="position-item {pl_class}">
            <div style="display: flex; justify-content: between; align-items: center;">
                <div>
                    <strong>{symbol}</strong>
                    <span class="badge {badge_class}">{qty:.4f} shares</span>
                </div>
                <div style="text-align: right;">
                    <div style="color: {'#00ff88' if unrealized_pl >= 0 else '#ff4444'}; font-weight: bold;">
                        ${unrealized_pl:+.2f} ({pl_percent:+.1f}%)
                    </div>
                    <div style="font-size: 0.8em; color: #8898aa;">
                        Avg: ${avg_entry:.4f} ‚Ä¢ Current: ${current_price:.4f}
                    </div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"L·ªói hi·ªÉn th·ªã position: {e}")

def display_pending_order(order):
    """Hi·ªÉn th·ªã l·ªánh ch·ªù v·ªõi n√∫t h·ªßy"""
    try:
        symbol = order.symbol
        side = order.side.value
        qty = float(order.qty)
        filled_qty = float(order.filled_qty) if order.filled_qty else 0
        remaining_qty = qty - filled_qty
        
        col1, col2, col3 = st.columns([3, 2, 1])
        
        with col1:
            st.write(f"**{symbol}**")
            st.write(f"Side: {side} | Qty: {remaining_qty:.2f}/{qty:.2f}")
            st.write(f"Status: {order.status.value}")
        
        with col2:
            st.write(f"Type: {order.type.value}")
            if order.limit_price:
                st.write(f"Limit: ${float(order.limit_price):.2f}")
        
        with col3:
            if st.button("‚ùå H·ªßy", key=f"cancel_{order.id}", use_container_width=True):
                if trader.cancel_order(order.id):
                    st.rerun()
                    
        st.markdown("---")
    except Exception as e:
        st.error(f"L·ªói hi·ªÉn th·ªã order: {e}")

# --- Session State ---
if 'trader' not in st.session_state:
    st.session_state.trader = None
if 'performance_analytics' not in st.session_state:
    st.session_state.performance_analytics = None
if 'selected_position' not in st.session_state:
    st.session_state.selected_position = None
if 'suggested_qty' not in st.session_state:
    st.session_state.suggested_qty = 1.0
if 'last_order_time' not in st.session_state:
    st.session_state.last_order_time = None
if 'mt5_trader' not in st.session_state:
    st.session_state.mt5_trader = MT5Trader() if MT5_AVAILABLE else None
if 'selected_mt5_symbol' not in st.session_state:
    st.session_state.selected_mt5_symbol = "EURUSD"

# --- Sidebar ---
with st.sidebar:
    st.markdown("""
    <div style='text-align: center; padding: 1rem;'>
        <h1 style='color: #667eea; font-size: 1.8rem; margin-bottom: 0.5rem;'>üöÄ</h1>
        <h2 style='color: white; font-size: 1.2rem; margin: 0;'>Live Trading Pro</h2>
        <p style='color: #8898aa; font-size: 0.8rem; margin: 0;'>Professional Platform</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown("""
    <div class="dashboard-card">
        <h3>üîå Platform Connection</h3>
    </div>
    """, unsafe_allow_html=True)
    
    account_type = st.radio("Account Type:", ["Paper Trading", "Live Trading"])
    api_key = st.text_input("API Key", type="password", key="api_key_input")
    api_secret = st.text_input("API Secret", type="password", key="api_secret_input")

    if st.button("K·∫øt n·ªëi", use_container_width=True, type="primary"):
        if api_key and api_secret:
            with st.spinner("ƒêang k·∫øt n·ªëi..."):
                st.session_state.trader = AlpacaTrader(api_key.strip(), api_secret.strip(), paper=(account_type == 'Paper Trading'))
                if st.session_state.trader and st.session_state.trader.connected:
                    st.session_state.performance_analytics = PerformanceAnalytics(st.session_state.trader)
                    st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi {account_type}!")
                else:
                    st.error("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i")
        else:
            st.warning("Vui l√≤ng nh·∫≠p API credentials")

    if st.session_state.trader and st.session_state.trader.connected:
        st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi {account_type}!")
        
        st.markdown("""
        <div class="dashboard-card">
            <h3>‚ö° Quick Actions</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu", use_container_width=True):
            st.rerun()
    else:
        st.info("Nh·∫≠p API credentials ƒë·ªÉ b·∫Øt ƒë·∫ßu")

# --- Main Content ---
if st.session_state.trader and st.session_state.trader.connected:
    trader = st.session_state.trader
    performance_analytics = st.session_state.performance_analytics

    # Status Cards
    try:
        account = trader.get_account_info()
        if account:
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="feature-icon">üí∞</div>
                    <div class="metric-value">${float(account.portfolio_value):,.2f}</div>
                    <div class="metric-label">Portfolio Value</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="feature-icon">‚ö°</div>
                    <div class="metric-value">${float(account.buying_power):,.2f}</div>
                    <div class="metric-label">Buying Power</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                positions = trader.get_positions()
                total_positions = len(positions) if positions else 0
                st.markdown(f"""
                <div class="metric-card">
                    <div class="feature-icon">üìà</div>
                    <div class="metric-value">{total_positions}</div>
                    <div class="metric-label">Open Positions</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                daily_pnl = performance_analytics.calculate_daily_pnl()
                st.markdown(f"""
                <div class="metric-card">
                    <div class="feature-icon">üíπ</div>
                    <div class="metric-value">${daily_pnl:,.2f}</div>
                    <div class="metric-label">Daily P&L</div>
                </div>
                """, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"L·ªói t·∫£i th√¥ng tin t√†i kho·∫£n: {e}")

    st.markdown('<hr class="divider">', unsafe_allow_html=True)

    # Tabs
    tab_titles = ["üìä T·ªïng quan", "üìà V·ªã th·∫ø", "üõ†Ô∏è Giao d·ªãch", 
                  "üìâ Qu·∫£n l√Ω r·ªßi ro", "üìä Hi·ªáu su·∫•t", "‚è≥ L·ªánh ch·ªù", "üìà MT5 Trading"]
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(tab_titles)

    # Tab 1: Overview
    with tab1:
        st.markdown("""
        <div class="dashboard-card">
            <h3>üìä T·ªïng quan t√†i kho·∫£n</h3>
        </div>
        """, unsafe_allow_html=True)
        
        try:
            account = trader.get_account_info()
            if account:
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">${float(account.portfolio_value):,.2f}</div>
                        <div class="metric-label">T·ªïng t√†i s·∫£n</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">${float(account.buying_power):,.2f}</div>
                        <div class="metric-label">S·ª©c mua</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">${float(account.cash):,.2f}</div>
                        <div class="metric-label">Ti·ªÅn m·∫∑t</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col4:
                    status_color = "#00ff88" if account.status.value == "ACTIVE" else "#ff4444"
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value" style="color: {status_color}">{account.status.value}</div>
                        <div class="metric-label">Tr·∫°ng th√°i</div>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"L·ªói t·∫£i th√¥ng tin: {e}")

    # Tab 2: Positions
    with tab2:
        st.markdown("""
        <div class="dashboard-card">
            <h3>üìà V·ªã th·∫ø hi·ªán t·∫°i</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üîÑ L√†m m·ªõi v·ªã th·∫ø", key="refresh_positions", use_container_width=True):
            st.rerun()
            
        try:
            positions = trader.get_positions()
            if positions:
                st.info("üí° Click v√†o v·ªã th·∫ø ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn form giao d·ªãch")
                
                for position in positions:
                    display_position(position)
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"üìà Mua th√™m", key=f"buy_{position.symbol}", use_container_width=True):
                            st.session_state.selected_position = {
                                'symbol': position.symbol,
                                'action': 'buy',
                                'current_qty': float(position.qty),
                                'asset_type': "Stocks"  # M·∫∑c ƒë·ªãnh l√† Stocks
                            }
                            st.success(f"ƒê√£ ch·ªçn {position.symbol} ƒë·ªÉ MUA - ki·ªÉm tra tab Giao d·ªãch!")
                    with col2:
                        if st.button(f"üìâ B√°n", key=f"sell_{position.symbol}", use_container_width=True):
                            st.session_state.selected_position = {
                                'symbol': position.symbol,
                                'action': 'sell', 
                                'current_qty': float(position.qty),
                                'asset_type': "Stocks"
                            }
                            st.success(f"ƒê√£ ch·ªçn {position.symbol} ƒë·ªÉ B√ÅN - ki·ªÉm tra tab Giao d·ªãch!")
                    st.markdown("---")
            else:
                st.info("üí∞ Kh√¥ng c√≥ v·ªã th·∫ø n√†o. B·∫Øt ƒë·∫ßu giao d·ªãch ƒë·ªÉ xem v·ªã th·∫ø ·ªü ƒë√¢y!")
                
        except Exception as e:
            st.error(f"L·ªói t·∫£i danh s√°ch v·ªã th·∫ø: {e}")

    # Tab 3: Manual Trading - ƒê√É S·ª¨A HO√ÄN TO√ÄN
    with tab3:
        st.markdown("""
        <div class="dashboard-card">
            <h3>üõ†Ô∏è Giao d·ªãch th·ªß c√¥ng</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu c√≥ position ƒë∆∞·ª£c ch·ªçn
        if st.session_state.selected_position:
            selected = st.session_state.selected_position
            st.markdown(f"""
            <div class="warning-box">
                <h4 style="margin: 0; color: white;">üéØ ƒêang giao d·ªãch {selected['symbol']} - Hi·ªán c√≥: {selected['current_qty']:.2f} shares - H√†nh ƒë·ªông: {selected['action'].upper()}</h4>
            </div>
            """, unsafe_allow_html=True)
            
            default_symbol = selected['symbol']
            default_action = selected['action']
            default_asset_type = selected.get('asset_type', 'Stocks')
            suggested_qty = selected['current_qty'] * 0.1
        else:
            default_symbol = "AAPL"
            default_action = "buy"
            default_asset_type = "Stocks"
            suggested_qty = 1.0
        
        # Trading form
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="dashboard-card">
                <h4>üéØ C·∫•u h√¨nh giao d·ªãch</h4>
            </div>
            """, unsafe_allow_html=True)
            
            asset_type = st.radio("Lo·∫°i t√†i s·∫£n:", ["Stocks", "Crypto", "Forex"], 
                                 index=["Stocks", "Crypto", "Forex"].index(default_asset_type) if default_asset_type in ["Stocks", "Crypto", "Forex"] else 0,
                                 horizontal=True, key="manual_asset")
            
            symbol = st.text_input("M√£:", value=default_symbol, key="manual_symbol").upper()
            
        with col2:
            st.markdown("""
            <div class="dashboard-card">
                <h4>üìä Chi ti·∫øt l·ªánh</h4>
            </div>
            """, unsafe_allow_html=True)
            
            # X·ª≠ l√Ω quantity
            if asset_type == "Crypto":
                min_qty = 0.0001
                step = 0.001
                format_str = "%.4f"
                default_qty = float(0.01)
            elif asset_type == "Forex":
                min_qty = 0.01
                step = 0.01
                format_str = "%.2f"
                default_qty = float(1.0)
            else:  # Stocks
                min_qty = 1
                step = 1
                format_str = "%d"
                default_qty = int(1)
            
            current_qty = st.session_state.selected_position['current_qty'] if st.session_state.selected_position else 0
            
            if current_qty > 0:
                st.write(f"üìä **V·ªã th·∫ø hi·ªán t·∫°i**: {current_qty:.2f} shares")
                col_q1, col_q2, col_q3 = st.columns(3)
                with col_q1:
                    if st.button("25%", use_container_width=True):
                        if asset_type == "Stocks":
                            st.session_state.suggested_qty = max(1, int(current_qty * 0.25))
                        else:
                            st.session_state.suggested_qty = current_qty * 0.25
                with col_q2:
                    if st.button("50%", use_container_width=True):
                        if asset_type == "Stocks":
                            st.session_state.suggested_qty = max(1, int(current_qty * 0.5))
                        else:
                            st.session_state.suggested_qty = current_qty * 0.5
                with col_q3:
                    if st.button("100%", use_container_width=True):
                        if asset_type == "Stocks":
                            st.session_state.suggested_qty = max(1, int(current_qty))
                        else:
                            st.session_state.suggested_qty = current_qty
            
            current_suggested_qty = st.session_state.get('suggested_qty', suggested_qty)
            
            if asset_type == "Stocks":
                if isinstance(current_suggested_qty, float):
                    current_suggested_qty = int(current_suggested_qty)
                qty = st.number_input("S·ªë l∆∞·ª£ng:", 
                                    min_value=min_qty, 
                                    value=current_suggested_qty, 
                                    step=step, 
                                    format=format_str, 
                                    key="manual_qty")
                qty = int(qty)
            else:
                qty = st.number_input("S·ªë l∆∞·ª£ng:", 
                                    min_value=min_qty, 
                                    value=float(current_suggested_qty), 
                                    step=step, 
                                    format=format_str, 
                                    key="manual_qty")
        
        # Hi·ªÉn th·ªã th√¥ng tin gi√° - ƒê√É S·ª¨A HO√ÄN TO√ÄN ƒê·ªÇ D√ôNG CCXT CHO CRYPTO
        current_price = None
        if symbol:
            try:
                order_value = 0
                if asset_type == "Crypto":
                    # --- D√ôNG H√ÄM M·ªöI CHO CRYPTO ---
                    with st.spinner("ƒêang l·∫•y gi√° crypto..."):
                        crypto_data = get_live_crypto_price_ccxt(symbol)
                        if crypto_data:
                            current_price = crypto_data['price']
                            price_change = crypto_data['change_pct']
                            order_value = current_price * float(qty)
                            
                            col_price, col_change, col_value = st.columns(3)
                            with col_price:
                                st.metric("Gi√° (Live)", f"${current_price:,.4f}")
                            with col_change:
                                st.metric("Thay ƒë·ªïi (24h)", f"{price_change:+.2f}%")
                            with col_value:
                                st.metric("Gi√° tr·ªã l·ªánh", f"${order_value:,.2f}")
                        else:
                            st.error("Kh√¥ng th·ªÉ l·∫•y gi√° crypto. Vui l√≤ng th·ª≠ l·∫°i.")
                
                else:
                    # --- D√ôNG LOGIC C≈® CHO STOCKS/FOREX ---
                    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
                        data = load_data_for_live(symbol, asset_type)
                        if data is not None and not data.empty and 'Close' in data.columns:
                            current_price = float(data['Close'].iloc[-1])
                            
                            if len(data) > 1:
                                prev_price = float(data['Close'].iloc[-2])
                                price_change = ((current_price - prev_price) / prev_price * 100)
                            else:
                                price_change = 0
                            
                            order_value = current_price * float(qty)

                            col_price, col_change, col_value = st.columns(3)
                            with col_price:
                                st.metric("Gi√° hi·ªán t·∫°i", f"${current_price:,.2f}")
                            with col_change:
                                st.metric("Thay ƒë·ªïi", f"{price_change:+.2f}%")
                            with col_value:
                                st.metric("Gi√° tr·ªã l·ªánh", f"${order_value:,.2f}")
                        else:
                            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ n√†y (Stocks/Forex)")
                            
            except Exception as e:
                st.error(f"L·ªói t·∫£i d·ªØ li·ªáu cho {symbol}: {e}")
        
        # N√∫t ƒë·∫∑t l·ªánh
        st.markdown("""
        <div class="dashboard-card">
            <h3>üéØ Th·ª±c hi·ªán l·ªánh</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col_buy, col_sell = st.columns(2)
        
        with col_buy:
            if st.button("üü¢ MUA / MUA TH√äM", 
                        use_container_width=True, 
                        type="primary",
                        key="manual_buy"):
                
                if not symbol:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p m√£")
                elif qty <= 0:
                    st.error("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0")
                else:
                    result = trader.place_order(symbol=symbol, qty=qty, side="buy", asset_type=asset_type)
                    if result:
                        # Log trade
                        trade_data = {
                            'timestamp': datetime.now(),
                            'symbol': symbol,
                            'side': 'BUY',
                            'quantity': qty,
                            'price': current_price if current_price else 0,
                            'strategy': 'Manual',
                            'asset_type': asset_type
                        }
                        performance_analytics.trade_journal.add_trade(trade_data)
                        st.session_state.last_order_time = datetime.now()
                        st.balloons()
                        
                        # Clear selection
                        st.session_state.selected_position = None
                        st.session_state.suggested_qty = default_qty
                        time.sleep(2)
                        st.rerun()
        
        with col_sell:
            if st.button("üî¥ B√ÅN / GI·∫¢M", 
                        use_container_width=True, 
                        type="primary",
                        key="manual_sell"):
                
                if not symbol:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p m√£")
                elif qty <= 0:
                    st.error("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0")
                else:
                    result = trader.place_order(symbol=symbol, qty=qty, side="sell", asset_type=asset_type)
                    if result:
                        # Log trade
                        trade_data = {
                            'timestamp': datetime.now(),
                            'symbol': symbol,
                            'side': 'SELL',
                            'quantity': qty,
                            'price': current_price if current_price else 0,
                            'strategy': 'Manual',
                            'asset_type': asset_type
                        }
                        performance_analytics.trade_journal.add_trade(trade_data)
                        st.session_state.last_order_time = datetime.now()
                        st.balloons()
                        
                        # Clear selection
                        st.session_state.selected_position = None
                        st.session_state.suggested_qty = default_qty
                        time.sleep(2)
                        st.rerun()
        
        # Clear selection button
        if st.session_state.selected_position:
            if st.button("üßπ X√≥a l·ª±a ch·ªçn", use_container_width=True):
                st.session_state.selected_position = None
                st.session_state.suggested_qty = default_qty
                st.rerun()

    # Tab 4: Risk Dashboard
    with tab4:
        st.markdown("""
        <div class="dashboard-card">
            <h3>üìâ Qu·∫£n l√Ω r·ªßi ro</h3>
        </div>
        """, unsafe_allow_html=True)
        
        try:
            risk_fig, risk_metrics = create_risk_dashboard(trader)
            st.plotly_chart(risk_fig, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói t·∫£i b·∫£ng qu·∫£n l√Ω r·ªßi ro: {e}")

    # Tab 5: Performance Analytics
    with tab5:
        st.markdown("""
        <div class="dashboard-card">
            <h3>üìä Ph√¢n t√≠ch hi·ªáu su·∫•t</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("T·∫°o b√°o c√°o", key="generate_report"):
            try:
                report = performance_analytics.generate_daily_report()
                
                st.subheader("T√≥m t·∫Øt hi·ªáu su·∫•t")
                
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("L·ª£i nhu·∫≠n/Thua l·ªó", f"${report['daily_pnl']:,.2f}")
                col2.metric("T·ª∑ l·ªá th·∫Øng", f"{report['win_rate']:.1f}%")
                col3.metric("H·ªá s·ªë l·ª£i nhu·∫≠n", f"{report['profit_factor']:.2f}")
                col4.metric("T·ªïng giao d·ªãch", report['total_trades'])
                    
            except Exception as e:
                st.error(f"L·ªói t·∫°o b√°o c√°o: {e}")

    # Tab 6: Pending Orders - ƒê√É S·ª¨A HO√ÄN TO√ÄN
    with tab6:
        st.markdown("""
        <div class="dashboard-card">
            <h3>‚è≥ Qu·∫£n l√Ω l·ªánh ch·ªù</h3>
        </div>
        """, unsafe_allow_html=True)
        
        st.info("üí° Qu·∫£n l√Ω c√°c l·ªánh ch·ªù c·ªßa b·∫°n t·∫°i ƒë√¢y. B·∫°n c√≥ th·ªÉ h·ªßy c√°c l·ªánh kh√¥ng mong mu·ªën ƒë·ªÉ tr√°nh wash trade.")
        
        if st.button("üîÑ L√†m m·ªõi l·ªánh ch·ªù", key="refresh_pending", use_container_width=True):
            st.rerun()
            
        try:
            # L·∫•y danh s√°ch l·ªánh ch·ªù - ƒê√É S·ª¨A HO√ÄN TO√ÄN
            pending_orders = trader.get_orders(status_filter='open')
            
            if pending_orders:
                st.subheader(f"üìã L·ªánh ch·ªù ({len(pending_orders)})")
                st.info(f"‚è∞ Th·ªùi gian hi·ªán t·∫°i: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                for order in pending_orders:
                    display_pending_order(order)
            else:
                st.success("üéâ Kh√¥ng c√≥ l·ªánh ch·ªù n√†o! T·∫•t c·∫£ l·ªánh ƒë√£ ƒë∆∞·ª£c kh·ªõp ho·∫∑c h·ªßy.")
                
        except Exception as e:
            st.error(f"L·ªói t·∫£i l·ªánh ch·ªù: {e}")

    # Tab 7: MT5 Trading - TAB M·ªöI HO√ÄN CH·ªàNH
    with tab7:
        st.markdown("""
        <div class="dashboard-card">
            <h3>üìà MetaTrader 5 Trading</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if not MT5_AVAILABLE:
            st.error("""
            **Th∆∞ vi·ªán MetaTrader5 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!**
            
            ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y, h√£y c√†i ƒë·∫∑t:
            ```bash
            pip install MetaTrader5
            ```
            
            V√† ƒë·∫£m b·∫£o MetaTrader 5 ƒëang ch·∫°y tr√™n m√°y c·ªßa b·∫°n.
            """)
        else:
            col_connect, col_main = st.columns([1, 3])
            
            with col_connect:
                st.subheader("üîó K·∫øt n·ªëi MT5")
                
                mt5_account = st.number_input("S·ªë t√†i kho·∫£n", value=123456, key="mt5_account")
                mt5_password = st.text_input("M·∫≠t kh·∫©u", type="password", key="mt5_password")
                mt5_server = st.text_input("Server", value="YourBrokerServer", key="mt5_server")
                mt5_path = st.text_input("ƒê∆∞·ªùng d·∫´n MT5", 
                                       value="C:/Program Files/MetaTrader 5/terminal64.exe", 
                                       key="mt5_path")
                
                col_btn1, col_btn2 = st.columns(2)
                with col_btn1:
                    if st.button("üîå K·∫øt n·ªëi MT5", use_container_width=True):
                        with st.spinner("ƒêang k·∫øt n·ªëi MT5..."):
                            if st.session_state.mt5_trader.connect(mt5_account, mt5_password, mt5_server, mt5_path):
                                st.rerun()
                
                with col_btn2:
                    if st.session_state.mt5_trader.connected:
                        if st.button("üîí Ng·∫Øt k·∫øt n·ªëi", use_container_width=True):
                            st.session_state.mt5_trader.disconnect()
                            st.rerun()
                
                # Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n n·∫øu ƒë√£ k·∫øt n·ªëi
                if st.session_state.mt5_trader.connected:
                    account_info = st.session_state.mt5_trader.get_account_info()
                    if account_info:
                        st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi: {account_info.login}")
                        st.info(f"""
                        **Th√¥ng tin t√†i kho·∫£n:**
                        - Broker: {account_info.company}
                        - Currency: {account_info.currency}
                        - Leverage: 1:{account_info.leverage}
                        - Balance: ${account_info.balance:.2f}
                        - Equity: ${account_info.equity:.2f}
                        """)
            
            with col_main:
                if st.session_state.mt5_trader.connected:
                    # Ph·∫ßn ch√≠nh - Bi·ªÉu ƒë·ªì v√† giao d·ªãch
                    col_chart, col_trade = st.columns([2, 1])
                    
                    with col_chart:
                        st.subheader("üìä Bi·ªÉu ƒë·ªì gi√°")
                        
                        # Ch·ªçn symbol v√† timeframe
                        col_sym, col_tf = st.columns(2)
                        with col_sym:
                            available_symbols = st.session_state.mt5_trader.get_symbols()
                            if available_symbols:
                                selected_symbol = st.selectbox(
                                    "Ch·ªçn symbol",
                                    available_symbols,
                                    index=available_symbols.index(st.session_state.selected_mt5_symbol) 
                                    if st.session_state.selected_mt5_symbol in available_symbols else 0,
                                    key="mt5_symbol_select"
                                )
                                st.session_state.selected_mt5_symbol = selected_symbol
                            else:
                                selected_symbol = st.text_input("Nh·∫≠p symbol", value="EURUSD", key="mt5_symbol_input")
                                st.session_state.selected_mt5_symbol = selected_symbol
                        
                        with col_tf:
                            timeframe = st.selectbox(
                                "Khung th·ªùi gian",
                                ["M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1", "MN1"],
                                index=2,
                                key="mt5_timeframe"
                            )
                            
                            # Map timeframe string to MT5 constant
                            tf_map = {
                                "M1": mt5.TIMEFRAME_M1,
                                "M5": mt5.TIMEFRAME_M5,
                                "M15": mt5.TIMEFRAME_M15,
                                "M30": mt5.TIMEFRAME_M30,
                                "H1": mt5.TIMEFRAME_H1,
                                "H4": mt5.TIMEFRAME_H4,
                                "D1": mt5.TIMEFRAME_D1,
                                "W1": mt5.TIMEFRAME_W1,
                                "MN1": mt5.TIMEFRAME_MN1
                            }
                        
                        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                        if selected_symbol:
                            chart = create_mt5_chart(selected_symbol, tf_map[timeframe])
                            if chart:
                                st.plotly_chart(chart, use_container_width=True)
                            else:
                                st.warning("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì")
                            
                            # Hi·ªÉn th·ªã gi√° hi·ªán t·∫°i
                            tick = st.session_state.mt5_trader.get_tick_data(selected_symbol)
                            if tick:
                                col_bid, col_ask, col_spread = st.columns(3)
                                with col_bid:
                                    st.metric("Bid", f"{tick.bid:.5f}")
                                with col_ask:
                                    st.metric("Ask", f"{tick.ask:.5f}")
                                with col_spread:
                                    spread = (tick.ask - tick.bid) * 10000 
                                    st.metric("Spread", f"{(tick.ask - tick.bid) * 10000:.1f} pips")
                    
                                with col_trade:
                                    st.subheader("üéØ Giao d·ªãch")
                                    
                            # Th√¥ng tin symbol
                            symbol_info = st.session_state.mt5_trader.get_symbol_info(selected_symbol)
                            if symbol_info:
                                st.info(f"""
                                        **Th√¥ng tin {selected_symbol}:**
                                        - Point: {symbol_info.point}
                                        - Digits: {symbol_info.digits}
                                        - Trade Stops Level: {symbol_info.trade_stops_level}
                                        - Trade Contract Size: {symbol_info.trade_contract_size}
                                        """)
                                    
                            # Form ƒë·∫∑t l·ªánh
                            volume = st.number_input("Kh·ªëi l∆∞·ª£ng (lots)", 
                                                        min_value=0.01, 
                                                        value=0.1, 
                                                        step=0.01,
                                                        key="mt5_volume")
                                    
                            col_sl, col_tp = st.columns(2)
                            with col_sl:
                                stop_loss = st.number_input("Stop Loss (pips)", 
                                                                min_value=0, 
                                                                value=0,
                                                                key="mt5_sl")
                            with col_tp:
                                take_profit = st.number_input("Take Profit (pips)", 
                                                                    min_value=0, 
                                                                    value=0,
                                                                    key="mt5_tp")
                                    
                            # N√∫t ƒë·∫∑t l·ªánh
                            col_buy, col_sell = st.columns(2)
                            with col_buy:
                                if st.button("üü¢ BUY NOW", 
                                                use_container_width=True,
                                                type="primary",
                                                key="mt5_buy"):
                                if selected_symbol and volume > 0:
                                    # T√≠nh SL v√† TP t·ª´ pips
                                    tick = st.session_state.mt5_trader.get_tick_data(selected_symbol)
                                        if tick:
                                            sl_price = tick.ask - (stop_loss * 0.0001) if stop_loss > 0 else 0
                                            tp_price = tick.ask + (take_profit * 0.0001) if take_profit > 0 else 0
                                                    
                                            result = st.session_state.mt5_trader.place_order(
                                                        symbol=selected_symbol,
                                                        volume=volume,
                                                        order_type="BUY",
                                                        sl=sl_price,
                                                        tp=tp_price
                                                    )
                                                    
                                            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                                                st.success(f"‚úÖ L·ªánh BUY {volume} lots {selected_symbol} th√†nh c√¥ng!")
                                                st.balloons()
                                                time.sleep(2)
                                                st.rerun()
                                            else:
                                                st.error(f"‚ùå L·ªói ƒë·∫∑t l·ªánh: {result.comment if result else 'Unknown error'}")
                                    
                            with col_sell:
                                if st.button("üî¥ SELL NOW", 
                                                use_container_width=True,
                                                type="primary",
                                                key="mt5_sell"):
                                    if selected_symbol and volume > 0:
                                        # T√≠nh SL v√† TP t·ª´ pips
                                        tick = st.session_state.mt5_trader.get_tick_data(selected_symbol)
                                        if tick:
                                            sl_price = tick.bid + (stop_loss * 0.0001) if stop_loss > 0 else 0
                                            tp_price = tick.bid - (take_profit * 0.0001) if take_profit > 0 else 0
                                                    
                                            result = st.session_state.mt5_trader.place_order(
                                                        symbol=selected_symbol,
                                                        volume=volume,
                                                        order_type="SELL",
                                                        sl=sl_price,
                                                        tp=tp_price
                                                    )
                                                    
                                            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                                                st.success(f"‚úÖ L·ªánh SELL {volume} lots {selected_symbol} th√†nh c√¥ng!")
                                                st.balloons()
                                                time.sleep(2)
                                                st.rerun()
                                            else:
                                                st.error(f"‚ùå L·ªói ƒë·∫∑t l·ªánh: {result.comment if result else 'Unknown error'}")
                                    
                            # L·ªánh ch·ªù
                            st.markdown("---")
                            st.subheader("‚è∞ L·ªánh ch·ªù")
                                    
                            col_order_type, col_order_price = st.columns(2)
                            with col_order_type:
                                pending_type = st.selectbox(
                                            "Lo·∫°i l·ªánh",
                                            ["BUY_LIMIT", "SELL_LIMIT", "BUY_STOP", "SELL_STOP"],
                                            key="mt5_pending_type"
                                        )
                            with col_order_price:
                                pending_price = st.number_input(
                                            "Gi√° k√≠ch ho·∫°t",
                                            min_value=0.00001,
                                            value=0.00000,
                                            format="%.5f",
                                            key="mt5_pending_price"
                                        )
                                    
                            if st.button("üìù ƒê·∫∂T L·ªÜNH CH·ªú", use_container_width=True):
                                if selected_symbol and volume > 0 and pending_price > 0:
                                    result = st.session_state.mt5_trader.place_pending_order(
                                                symbol=selected_symbol,
                                                volume=volume,
                                                order_type=pending_type,
                                                price=pending_price,
                                                sl=0,
                                                tp=0
                                            )
                                            
                                    if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                                        st.success(f"‚úÖ ƒê√£ ƒë·∫∑t l·ªánh {pending_type} {volume} lots {selected_symbol}!")
                                        time.sleep(2)
                                        st.rerun()
                                    else:
                                        st.error(f"‚ùå L·ªói ƒë·∫∑t l·ªánh ch·ªù: {result.comment if result else 'Unknown error'}")
                            
                            # Ph·∫ßn qu·∫£n l√Ω v·ªã th·∫ø v√† l·ªánh
                            if st.session_state.mt5_trader.connected:
                                st.markdown("---")
                                
                                col_positions, col_orders = st.columns(2)
                                
                                with col_positions:
                                    st.subheader("üìà V·ªã th·∫ø m·ªü")
                                    
                                    if st.button("üîÑ L√†m m·ªõi v·ªã th·∫ø", key="refresh_mt5_positions"):
                                        st.rerun()
                                        
                                    positions = st.session_state.mt5_trader.get_positions()
                                    if positions:
                                        for position in positions:
                                            display_mt5_position(position)
                                    else:
                                        st.info("Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü")
                                
                                with col_orders:
                                    st.subheader("‚è≥ L·ªánh ch·ªù")
                                    
                                    if st.button("üîÑ L√†m m·ªõi l·ªánh", key="refresh_mt5_orders"):
                                        st.rerun()
                                        
                                    orders = st.session_state.mt5_trader.get_orders()
                                    if orders:
                                        for order in orders:
                                            col1, col2 = st.columns([3, 1])
                                            with col1:
                                                st.write(f"**{order.symbol}** - {order.type}")
                                                st.write(f"Volume: {order.volume_initial} ‚Ä¢ Price: {order.price_open:.5f}")
                                            with col2:
                                                if st.button("‚ùå", key=f"cancel_{order.ticket}"):
                                                    result = st.session_state.mt5_trader.cancel_order(order.ticket)
                                                    if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                                                        st.success("‚úÖ ƒê√£ h·ªßy l·ªánh!")
                                                        time.sleep(2)
                                                        st.rerun()
                                    else:
                                        st.info("Kh√¥ng c√≥ l·ªánh ch·ªù n√†o")
                            
                            else:
                                st.info("üîå K·∫øt n·ªëi MT5 ƒë·ªÉ b·∫Øt ƒë·∫ßu giao d·ªãch")
                                
                                # Demo bi·ªÉu ƒë·ªì khi ch∆∞a k·∫øt n·ªëi
                                st.subheader("üìä Bi·ªÉu ƒë·ªì demo (EURUSD)")
                                # T·∫°o bi·ªÉu ƒë·ªì demo v·ªõi d·ªØ li·ªáu gi·∫£
                                dates = pd.date_range(start='2024-01-01', periods=100, freq='D')
                                demo_data = pd.DataFrame({
                                    'open': 1.0700 + np.random.randn(100).cumsum() * 0.001,
                                    'high': 1.0700 + np.random.randn(100).cumsum() * 0.001 + 0.002,
                                    'low': 1.0700 + np.random.randn(100).cumsum() * 0.001 - 0.002,
                                    'close': 1.0700 + np.random.randn(100).cumsum() * 0.001
                                }, index=dates)
                                
                                fig_demo = go.Figure(data=[go.Candlestick(
                                    x=demo_data.index,
                                    open=demo_data['open'],
                                    high=demo_data['high'],
                                    low=demo_data['low'],
                                    close=demo_data['close']
                                )])
                                
                                fig_demo.update_layout(
                                    title="EURUSD - Bi·ªÉu ƒë·ªì demo (K·∫øt n·ªëi MT5 ƒë·ªÉ xem d·ªØ li·ªáu th·ª±c)",
                                    template="plotly_dark",
                                    height=400
                                )
                                
                                st.plotly_chart(fig_demo, use_container_width=True)

            else:
                # Welcome Screen
                st.markdown("""
                <div class="dashboard-card">
                    <h2 style="text-align: center; margin-bottom: 2rem;">üöÄ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Live Trading Pro</h2>
                    <p style="text-align: center; color: #8898aa; font-size: 1.1rem;">
                        K·∫øt n·ªëi t√†i kho·∫£n Alpaca c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu giao d·ªãch
                    </p>
                </div>
                """, unsafe_allow_html=True)

            # Footer
            st.markdown("""
            <div style='text-align: center; padding: 3rem; color: #8898aa;'>
                <p style='margin: 0; font-size: 0.9rem;'>Built with ‚ù§Ô∏è using Streamlit ‚Ä¢ Professional Trading Platform</p>
                <p style='margin: 0.5rem 0 0 0; font-size: 0.8rem; opacity: 0.7;'>Live Trading Pro v2.0 ‚Ä¢ MT5 Integration</p>
            </div>
            """, unsafe_allow_html=True)