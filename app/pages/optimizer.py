import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import vectorbt as vbt
from itertools import product
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import c√°c module t·ª´ th∆∞ m·ª•c app
try:
    # ƒêi·ªÅu ch·ªânh ƒë∆∞·ªùng d·∫´n ƒë·ªÉ linh ho·∫°t h∆°n
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    if project_root not in sys.path:
        sys.path.append(project_root)
    from app.loaders.crypto_loader import CryptoLoader
    from app.loaders.forex_loader import ForexLoader
except ImportError:
    st.error("L·ªói import: Kh√¥ng t√¨m th·∫•y c√°c file loader. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c th∆∞ m·ª•c.")
    st.stop()

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Optimizer", page_icon="‚ö°", layout="wide")
st.title("‚ö° Grid-Search T·ªëi ∆∞u h√≥a MA-Cross")

# --- Sidebar ƒë·ªÉ ng∆∞·ªùi d√πng t√πy ch·ªânh ---
st.sidebar.header("üéõÔ∏è C·∫•u h√¨nh T·ªëi ∆∞u h√≥a")

asset_class = st.sidebar.selectbox("Lo·∫°i t√†i s·∫£n:", ["Crypto", "Forex", "Stocks"])

if asset_class == "Crypto":
    symbol = st.sidebar.text_input("M√£ giao d·ªãch:", "BTC/USDT")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1h", "4h", "1d"], index=0)
else:
    symbol = st.sidebar.text_input("M√£ giao d·ªãch:", "EURUSD=X" if asset_class == "Forex" else "AAPL")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1d"], index=0)

st.sidebar.subheader("D·∫£i tham s·ªë")
fasts = st.sidebar.multiselect("Danh s√°ch MA Nhanh:", [5, 10, 15, 20, 25, 30], default=[10, 20])
slows = st.sidebar.multiselect("Danh s√°ch MA Ch·∫≠m:", [40, 50, 60, 100, 150, 200], default=[50, 100])

target_metric = st.sidebar.selectbox(
    "Ch·ªâ s·ªë m·ª•c ti√™u:",
    ["Sharpe", "Return", "Win Rate", "Profit Factor"]
)

# --- H√†m t·∫£i d·ªØ li·ªáu v·ªõi cache (ƒê√É C·∫¨P NH·∫¨T THEO H∆Ø·ªöNG D·∫™N) ---
@st.cache_data(ttl=600)
def load_price_data(asset, sym, timeframe):
    """T·∫£i v·ªÅ chu·ªói gi√° ƒë√≥ng c·ª≠a cho backtest m·ªôt c√°ch an to√†n."""
    try:
        if asset == "Crypto":
            data = CryptoLoader().fetch(sym, timeframe, 2000)
        else:
            data = ForexLoader().fetch(sym, timeframe, "730d")
        
        # --- KI·ªÇM TRA AN TO√ÄN ---
        if data is None or data.empty:
            st.error(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu cho m√£ {sym}. API c√≥ th·ªÉ ƒë√£ b·ªã l·ªói ho·∫∑c m√£ kh√¥ng h·ª£p l·ªá.")
            return None
        
        if 'Close' not in data.columns:
            st.error(f"D·ªØ li·ªáu tr·∫£ v·ªÅ cho {sym} kh√¥ng ch·ª©a c·ªôt 'Close'.")
            return None
        
        return data["Close"]
        # ----------------------

    except Exception as e:
        st.error(f"L·ªói h·ªá th·ªëng khi t·∫£i d·ªØ li·ªáu: {e}")
        return None

# --- H√†m tr·ª£ gi√∫p ƒë·ªÉ l·∫•y gi√° tr·ªã s·ªë t·ª´ k·∫øt qu·∫£ c·ªßa vectorbt ---
def get_scalar(value):
    """Tr√≠ch xu·∫•t m·ªôt gi√° tr·ªã s·ªë t·ª´ m·ªôt scalar ho·∫∑c m·ªôt Series."""
    if isinstance(value, pd.Series):
        if not value.empty:
            return value.iloc[0]
        return np.nan # Tr·∫£ v·ªÅ NaN n·∫øu Series r·ªóng
    return value # Tr·∫£ v·ªÅ ch√≠nh n√≥ n·∫øu ƒë√£ l√† scalar

# --- Ch·∫°y t·ªëi ∆∞u h√≥a khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ---
if st.sidebar.button("üöÄ Ch·∫°y T·ªëi ∆∞u h√≥a", type="primary"):
    price = load_price_data(asset_class, symbol, tf)
    
    if price is not None and not price.empty:
        results = []
        
        param_combinations = [p for p in product(fasts, slows) if p[0] < p[1]]
        
        if not param_combinations:
            st.warning("Kh√¥ng c√≥ c·∫∑p tham s·ªë h·ª£p l·ªá n√†o (MA Nhanh ph·∫£i < MA Ch·∫≠m).")
        else:
            progress_bar = st.progress(0)
            status_text = st.empty()

            for i, (f, s) in enumerate(param_combinations):
                status_text.text(f"ƒêang ki·ªÉm tra: MA({f}, {s})... ({i+1}/{len(param_combinations)})")
                
                fast_ma = price.rolling(f).mean()
                slow_ma = price.rolling(s).mean()
                entries = fast_ma > slow_ma
                exits = fast_ma < slow_ma
                
                pf = vbt.Portfolio.from_signals(price, entries, exits, fees=0.001, freq=tf)
                
                results.append({
                    "Fast": f,
                    "Slow": s,
                    "Sharpe": get_scalar(pf.sharpe_ratio()),
                    "Return": get_scalar(pf.total_return()),
                    "Win Rate": get_scalar(pf.trades.win_rate()),
                    "Profit Factor": get_scalar(pf.trades.profit_factor()),
                    "Trades": get_scalar(pf.trades.count())
                })
                
                progress_bar.progress((i + 1) / len(param_combinations))

            progress_bar.empty()
            status_text.empty()

            if results:
                df = pd.DataFrame(results)

                df['Profit Factor'] = df['Profit Factor'].replace([np.inf, -np.inf], np.nan)

                df.sort_values(target_metric, ascending=False, na_position='last', inplace=True)
                df.reset_index(drop=True, inplace=True)
                
                st.subheader("üìä K·∫øt qu·∫£ T·ªëi ∆∞u h√≥a")
                st.dataframe(df.style.format({
                    "Sharpe": "{:.2f}",
                    "Return": "{:.2%}",
                    "Win Rate": "{:.2%}",
                    "Profit Factor": "{:.2f}"
                }))
                
                best_df = df.dropna(subset=[target_metric])
                if not best_df.empty:
                    best = best_df.iloc[0]
                    st.success(f"üèÜ **T·ªët nh·∫•t:** Fast={int(best.Fast)}, Slow={int(best.Slow)} | {target_metric}={best[target_metric]:.2f}")

                st.subheader("Tr·ª±c quan h√≥a Heatmap")
                try:
                    heatmap_df = df.dropna(subset=[target_metric]).pivot(index='Slow', columns='Fast', values=target_metric)
                    if not heatmap_df.empty:
                        fig = go.Figure(data=go.Heatmap(
                            z=heatmap_df.values, x=heatmap_df.columns, y=heatmap_df.index, colorscale='Viridis'
                        ))
                        fig.update_layout(title=f'Heatmap c·ªßa {target_metric}', template="plotly_dark")
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω heatmap.")
                except Exception as e:
                    st.warning(f"Kh√¥ng th·ªÉ v·∫Ω heatmap: {e}")
            else:
                st.warning("Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c t·∫°o ra.")
else:
    st.info("üëà Vui l√≤ng c·∫•u h√¨nh c√°c tham s·ªë v√† nh·∫•n 'Ch·∫°y T·ªëi ∆∞u h√≥a' ·ªü thanh b√™n tr√°i.")
