import streamlit as st
import pandas as pd
import sys
import os
import ccxt 
import yfinance as yf

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Data Center", page_icon="üóÉÔ∏è", layout="wide")
st.title("üóÉÔ∏è Data Center")
st.markdown("### T·∫£i v√† xem d·ªØ li·ªáu t√†i ch√≠nh th√¥ t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau.")

# --- Sidebar ƒë·ªÉ ng∆∞·ªùi d√πng t√πy ch·ªânh ---
st.sidebar.header("C·∫•u h√¨nh D·ªØ li·ªáu")
asset_class = st.sidebar.radio("Lo·∫°i t√†i s·∫£n:", ["Crypto", "Forex", "Stocks"])

if asset_class == "Crypto":
    symbol = st.sidebar.text_input("C·∫∑p giao d·ªãch:", "BTC/USDT")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["15m", "1h", "4h", "1d"], index=1)
    limit = st.sidebar.slider("S·ªë n·∫øn:", 200, 2000, 500)
elif asset_class == "Forex":
    symbol = st.sidebar.text_input("C·∫∑p giao d·ªãch:", "EURUSD=X")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1h", "4h", "1d"], index=0)
    limit = st.sidebar.slider("S·ªë n·∫øn:", 200, 1000, 500)
else: # Stocks
    symbol = st.sidebar.text_input("M√£ c·ªï phi·∫øu:", "AAPL")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1d", "1h"], index=0)
    limit = st.sidebar.slider("S·ªë n·∫øn:", 200, 1000, 500)

# --- H√†m t·∫£i d·ªØ li·ªáu an to√†n ---
@st.cache_data(ttl=300)
def load_data(asset, sym, timeframe, data_limit):
    """T·∫£i d·ªØ li·ªáu m·ªôt c√°ch an to√†n v√† chi ti·∫øt."""
    with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {sym}..."):
        try:
            if asset == "Crypto":
                exchange = ccxt.kucoin()
                ohlcv = exchange.fetch_ohlcv(sym, timeframe, limit=data_limit)
                data = pd.DataFrame(ohlcv, columns=['timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
                data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
                data.set_index('timestamp', inplace=True)
            else: # Forex v√† Stocks
                period = "5y"
                if timeframe not in ['1d', '1wk', '1mo']:
                    period = "730d"
                data = yf.download(sym, period=period, interval=timeframe, progress=False)
                data.columns = [col[0].capitalize() if isinstance(col, tuple) else str(col).capitalize() for col in data.columns]

            if data is None or data.empty:
                st.error(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu cho m√£ {sym}. API c√≥ th·ªÉ ƒë√£ b·ªã l·ªói ho·∫∑c m√£ kh√¥ng h·ª£p l·ªá.")
                return None
            
            return data
        except Exception as e:
            st.error(f"L·ªói h·ªá th·ªëng khi t·∫£i d·ªØ li·ªáu cho {sym}: {e}")
            return None

# --- N√∫t ƒë·ªÉ t·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu ---
if st.sidebar.button("T·∫£i D·ªØ li·ªáu", type="primary"):
    df = load_data(asset_class, symbol, tf, limit)
    
    if df is not None and not df.empty:
        required_cols = ['Open', 'High', 'Low', 'Close', 'Volume']
        if not all(col in df.columns for col in required_cols):
            st.error(f"D·ªØ li·ªáu cho {symbol} kh√¥ng c√≥ ƒë·ªß c√°c c·ªôt c·∫ßn thi·∫øt. C√°c c·ªôt hi·ªán c√≥: {list(df.columns)}")
        else:
            st.success(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(df)} d√≤ng d·ªØ li·ªáu cho {symbol}.")
            st.subheader("Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng (Line Chart)")
            st.line_chart(df['Close'])
            st.subheader("D·ªØ li·ªáu th√¥ (50 d√≤ng cu·ªëi)")
            st.dataframe(df.tail(50))
    else:
        st.info("Qu√° tr√¨nh t·∫£i d·ªØ li·ªáu ƒë√£ k·∫øt th√∫c. N·∫øu c√≥ l·ªói, th√¥ng b√°o s·∫Ω hi·ªÉn th·ªã ·ªü tr√™n.")
else:
    st.info("üëà Vui l√≤ng c·∫•u h√¨nh v√† nh·∫•n 'T·∫£i D·ªØ li·ªáu' ·ªü thanh b√™n tr√°i.")
