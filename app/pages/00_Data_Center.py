import streamlit as st
import pandas as pd
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import c√°c module t·ª´ th∆∞ m·ª•c app
try:
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    if project_root not in sys.path:
        sys.path.append(project_root)
    from app.loaders.crypto_loader import CryptoLoader
    from app.loaders.forex_loader import ForexLoader
except ImportError:
    st.error("L·ªói import: Kh√¥ng t√¨m th·∫•y c√°c file loader. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c th∆∞ m·ª•c.")
    st.stop()

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Data Center", page_icon="üóÉÔ∏è", layout="wide")
st.title("üóÉÔ∏è Data Center")
st.markdown("### T·∫£i v√† xem d·ªØ li·ªáu t√†i ch√≠nh th√¥ t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau.")

# --- Sidebar ƒë·ªÉ ng∆∞·ªùi d√πng t√πy ch·ªânh ---
st.sidebar.header("C·∫•u h√¨nh D·ªØ li·ªáu")
asset_class = st.sidebar.radio("Lo·∫°i t√†i s·∫£n:", ["Crypto", "Forex", "Stocks"])

if asset_class == "Crypto":
    symbol = st.sidebar.text_input("C·∫∑p giao d·ªãch:", "BTC/USDT")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["15m", "1h", "4h", "1d"], index=1)
    limit = st.sidebar.slider("S·ªë n·∫øn:", 200, 2000, 500)
elif asset_class == "Forex":
    symbol = st.sidebar.text_input("C·∫∑p giao d·ªãch:", "EURUSD=X")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1h", "4h", "1d"], index=0)
    limit = st.sidebar.slider("S·ªë n·∫øn:", 200, 1000, 500)
else: # Stocks
    symbol = st.sidebar.text_input("M√£ c·ªï phi·∫øu:", "AAPL")
    tf = st.sidebar.selectbox("Khung th·ªùi gian:", ["1d", "1h"], index=0)
    limit = st.sidebar.slider("S·ªë n·∫øn:", 200, 1000, 500)

# --- H√†m t·∫£i d·ªØ li·ªáu v·ªõi cache (ƒê√É C·∫¨P NH·∫¨T) ---
@st.cache_data(ttl=300) # Cache k·∫øt qu·∫£ trong 5 ph√∫t
def load_data(asset, sym, timeframe, data_limit):
    """T·∫£i d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch an to√†n."""
    with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {sym}..."):
        try:
            if asset == "Crypto":
                data = CryptoLoader().fetch(sym, timeframe, data_limit)
            else: # Forex v√† Stocks ƒë·ªÅu d√πng ForexLoader (yfinance)
                if timeframe == '1d':
                    period = f"{data_limit}d"
                else:
                    # yfinance gi·ªõi h·∫°n data < 1d trong 730 ng√†y
                    period = f"{min(data_limit // 8, 729)}d"
                data = ForexLoader().fetch(sym, timeframe, period)

            # --- KI·ªÇM TRA AN TO√ÄN ---
            if data is None or data.empty:
                st.error(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu cho m√£ {sym}. API c√≥ th·ªÉ ƒë√£ b·ªã l·ªói ho·∫∑c m√£ kh√¥ng h·ª£p l·ªá.")
                return None
            
            return data
            # ----------------------
        except Exception as e:
            st.error(f"L·ªói h·ªá th·ªëng khi t·∫£i d·ªØ li·ªáu cho {sym}: {e}")
            return None

# --- N√∫t ƒë·ªÉ t·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu (ƒê√É C·∫¨P NH·∫¨T) ---
if st.sidebar.button("T·∫£i D·ªØ li·ªáu", type="primary"):
    df = load_data(asset_class, symbol, tf, limit)
    
    if df is not None and not df.empty:
        # Th√™m ki·ªÉm tra c·ªôt 'Close' tr∆∞·ªõc khi s·ª≠ d·ª•ng
        if 'Close' not in df.columns:
            st.error(f"D·ªØ li·ªáu cho {symbol} kh√¥ng c√≥ c·ªôt 'Close'.")
        else:
            st.success(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(df)} d√≤ng d·ªØ li·ªáu cho {symbol}.")
            
            st.subheader("Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng (Line Chart)")
            st.line_chart(df['Close'])
            
            st.subheader("D·ªØ li·ªáu th√¥ (50 d√≤ng cu·ªëi)")
            st.dataframe(df.tail(50))
    else:
        # Th√¥ng b√°o l·ªói chi ti·∫øt h∆°n ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n trong h√†m load_data
        st.info("Qu√° tr√¨nh t·∫£i d·ªØ li·ªáu ƒë√£ k·∫øt th√∫c. N·∫øu c√≥ l·ªói, th√¥ng b√°o s·∫Ω hi·ªÉn th·ªã ·ªü tr√™n.")
else:
    st.info("üëà Vui l√≤ng c·∫•u h√¨nh v√† nh·∫•n 'T·∫£i D·ªØ li·ªáu' ·ªü thanh b√™n tr√°i.")
